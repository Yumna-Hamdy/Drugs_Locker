
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c0  00800060  000034b4  00003528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002e98  00000000  00000000  000035e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d25  00000000  00000000  00006480  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000071a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000072e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007455  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ad38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 87 10 	call	0x210e	; 0x210e <main>
      7a:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e1       	ldi	r26, 0x17	; 23
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	87 e1       	ldi	r24, 0x17	; 23
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     b3e:	0e 94 45 06 	call	0xc8a	; 0xc8a <TWI_init>
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x6>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_writeByte+0x8>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     b5a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     b5e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	11 f0       	breq	.+4      	; 0xb6a <EEPROM_writeByte+0x22>
        return ERROR;
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	28 c0       	rjmp	.+80     	; 0xbba <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	80 70       	andi	r24, 0x00	; 0
     b70:	97 70       	andi	r25, 0x07	; 7
     b72:	88 0f       	add	r24, r24
     b74:	89 2f       	mov	r24, r25
     b76:	88 1f       	adc	r24, r24
     b78:	99 0b       	sbc	r25, r25
     b7a:	91 95       	neg	r25
     b7c:	80 6a       	ori	r24, 0xA0	; 160
     b7e:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     b82:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b86:	88 31       	cpi	r24, 0x18	; 24
     b88:	11 f0       	breq	.+4      	; 0xb8e <EEPROM_writeByte+0x46>
        return ERROR; 
     b8a:	1c 82       	std	Y+4, r1	; 0x04
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     b94:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     b98:	88 32       	cpi	r24, 0x28	; 40
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EEPROM_writeByte+0x58>
        return ERROR;
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     ba6:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	11 f0       	breq	.+4      	; 0xbb2 <EEPROM_writeByte+0x6a>
        return ERROR;
     bae:	1c 82       	std	Y+4, r1	; 0x04
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bb2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
	
    return SUCCESS;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 83       	std	Y+4, r24	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <EEPROM_readByte+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9a 83       	std	Y+2, r25	; 0x02
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	7c 83       	std	Y+4, r23	; 0x04
     bde:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     be0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_START)
     be4:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     be8:	88 30       	cpi	r24, 0x08	; 8
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_readByte+0x26>
        return ERROR;
     bec:	1d 82       	std	Y+5, r1	; 0x05
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	80 70       	andi	r24, 0x00	; 0
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	88 0f       	add	r24, r24
     bfa:	89 2f       	mov	r24, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	91 95       	neg	r25
     c02:	80 6a       	ori	r24, 0xA0	; 160
     c04:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c08:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c0c:	88 31       	cpi	r24, 0x18	; 24
     c0e:	11 f0       	breq	.+4      	; 0xc14 <EEPROM_readByte+0x4a>
        return ERROR;
     c10:	1d 82       	std	Y+5, r1	; 0x05
     c12:	32 c0       	rjmp	.+100    	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c1a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c1e:	88 32       	cpi	r24, 0x28	; 40
     c20:	11 f0       	breq	.+4      	; 0xc26 <EEPROM_readByte+0x5c>
        return ERROR;
     c22:	1d 82       	std	Y+5, r1	; 0x05
     c24:	29 c0       	rjmp	.+82     	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     c26:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c2a:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x6c>
        return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	21 c0       	rjmp	.+66     	; 0xc78 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	81 6a       	ori	r24, 0xA1	; 161
     c4a:	0e 94 76 06 	call	0xcec	; 0xcec <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c4e:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c52:	80 34       	cpi	r24, 0x40	; 64
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_readByte+0x90>
        return ERROR;
     c56:	1d 82       	std	Y+5, r1	; 0x05
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     c5a:	0e 94 a0 06 	call	0xd40	; 0xd40 <TWI_readWithNACK>
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c64:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_getStatus>
     c68:	88 35       	cpi	r24, 0x58	; 88
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_readByte+0xa6>
        return ERROR;
     c6c:	1d 82       	std	Y+5, r1	; 0x05
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     c70:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TWI_stop>
    return SUCCESS;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     c92:	e0 e2       	ldi	r30, 0x20	; 32
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
	TWSR = 0x00;
     c9a:	e1 e2       	ldi	r30, 0x21	; 33
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     ca0:	e2 e2       	ldi	r30, 0x22	; 34
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     ca8:	e6 e5       	ldi	r30, 0x56	; 86
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	80 83       	st	Z, r24
}
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <TWI_start>:

void TWI_start(void)
{
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     cbe:	e6 e5       	ldi	r30, 0x56	; 86
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	84 ea       	ldi	r24, 0xA4	; 164
     cc4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     cc6:	e6 e5       	ldi	r30, 0x56	; 86
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	88 23       	and	r24, r24
     cce:	dc f7       	brge	.-10     	; 0xcc6 <TWI_start+0x10>
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <TWI_stop>:

void TWI_stop(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     cde:	e6 e5       	ldi	r30, 0x56	; 86
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	84 e9       	ldi	r24, 0x94	; 148
     ce4:	80 83       	st	Z, r24
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_write>:

void TWI_write(uint8 data)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     cf8:	e3 e2       	ldi	r30, 0x23	; 35
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     d00:	e6 e5       	ldi	r30, 0x56	; 86
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	84 e8       	ldi	r24, 0x84	; 132
     d06:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d08:	e6 e5       	ldi	r30, 0x56	; 86
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	88 23       	and	r24, r24
     d10:	dc f7       	brge	.-10     	; 0xd08 <TWI_write+0x1c>
}
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	84 ec       	ldi	r24, 0xC4	; 196
     d28:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d2a:	e6 e5       	ldi	r30, 0x56	; 86
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	dc f7       	brge	.-10     	; 0xd2a <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     d34:	e3 e2       	ldi	r30, 0x23	; 35
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     d48:	e6 e5       	ldi	r30, 0x56	; 86
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	84 e8       	ldi	r24, 0x84	; 132
     d4e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d50:	e6 e5       	ldi	r30, 0x56	; 86
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 23       	and	r24, r24
     d58:	dc f7       	brge	.-10     	; 0xd50 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     d5a:	e3 e2       	ldi	r30, 0x23	; 35
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
}
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret

00000d66 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     d70:	e1 e2       	ldi	r30, 0x21	; 33
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 7f       	andi	r24, 0xF8	; 248
     d78:	89 83       	std	Y+1, r24	; 0x01
    return status;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <KeyPad_getPressedKey+0x6>
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     d8e:	1a 82       	std	Y+2, r1	; 0x02
     d90:	4c c0       	rjmp	.+152    	; 0xe2a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	80 e1       	ldi	r24, 0x10	; 16
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <KeyPad_getPressedKey+0x22>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <KeyPad_getPressedKey+0x1e>
     daa:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <KeyPad_getPressedKey+0x3e>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <KeyPad_getPressedKey+0x3a>
     dc6:	80 95       	com	r24
     dc8:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
     dca:	19 82       	std	Y+1, r1	; 0x01
     dcc:	28 c0       	rjmp	.+80     	; 0xe1e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     dce:	e9 e3       	ldi	r30, 0x39	; 57
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a9 01       	movw	r20, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <KeyPad_getPressedKey+0x62>
     de2:	55 95       	asr	r21
     de4:	47 95       	ror	r20
     de6:	8a 95       	dec	r24
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <KeyPad_getPressedKey+0x5e>
     dea:	ca 01       	movw	r24, r20
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	90 70       	andi	r25, 0x00	; 0
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	91 f4       	brne	.+36     	; 0xe18 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	98 2f       	mov	r25, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	89 0f       	add	r24, r25
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	0e 94 1a 07 	call	0xe34	; 0xe34 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	a8 f2       	brcs	.-86     	; 0xdce <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	8a 83       	std	Y+2, r24	; 0x02
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <KeyPad_getPressedKey+0xae>
     e30:	b0 cf       	rjmp	.-160    	; 0xd92 <KeyPad_getPressedKey+0xe>
     e32:	ad cf       	rjmp	.-166    	; 0xd8e <KeyPad_getPressedKey+0xa>

00000e34 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <KeyPad_4x4_adjustKeyNumber+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <KeyPad_4x4_adjustKeyNumber+0x8>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3c 83       	std	Y+4, r19	; 0x04
     e4a:	2b 83       	std	Y+3, r18	; 0x03
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	91 05       	cpc	r25, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <KeyPad_4x4_adjustKeyNumber+0x24>
     e56:	70 c0       	rjmp	.+224    	; 0xf38 <KeyPad_4x4_adjustKeyNumber+0x104>
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	29 30       	cpi	r18, 0x09	; 9
     e5e:	31 05       	cpc	r19, r1
     e60:	5c f5       	brge	.+86     	; 0xeb8 <KeyPad_4x4_adjustKeyNumber+0x84>
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <KeyPad_4x4_adjustKeyNumber+0x3a>
     e6c:	59 c0       	rjmp	.+178    	; 0xf20 <KeyPad_4x4_adjustKeyNumber+0xec>
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	3c 81       	ldd	r19, Y+4	; 0x04
     e72:	25 30       	cpi	r18, 0x05	; 5
     e74:	31 05       	cpc	r19, r1
     e76:	9c f4       	brge	.+38     	; 0xe9e <KeyPad_4x4_adjustKeyNumber+0x6a>
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <KeyPad_4x4_adjustKeyNumber+0x50>
     e82:	48 c0       	rjmp	.+144    	; 0xf14 <KeyPad_4x4_adjustKeyNumber+0xe0>
     e84:	2b 81       	ldd	r18, Y+3	; 0x03
     e86:	3c 81       	ldd	r19, Y+4	; 0x04
     e88:	23 30       	cpi	r18, 0x03	; 3
     e8a:	31 05       	cpc	r19, r1
     e8c:	0c f0       	brlt	.+2      	; 0xe90 <KeyPad_4x4_adjustKeyNumber+0x5c>
     e8e:	45 c0       	rjmp	.+138    	; 0xf1a <KeyPad_4x4_adjustKeyNumber+0xe6>
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <KeyPad_4x4_adjustKeyNumber+0x68>
     e9a:	39 c0       	rjmp	.+114    	; 0xf0e <KeyPad_4x4_adjustKeyNumber+0xda>
     e9c:	67 c0       	rjmp	.+206    	; 0xf6c <KeyPad_4x4_adjustKeyNumber+0x138>
     e9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ea0:	3c 81       	ldd	r19, Y+4	; 0x04
     ea2:	26 30       	cpi	r18, 0x06	; 6
     ea4:	31 05       	cpc	r19, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <KeyPad_4x4_adjustKeyNumber+0x76>
     ea8:	41 c0       	rjmp	.+130    	; 0xf2c <KeyPad_4x4_adjustKeyNumber+0xf8>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	87 30       	cpi	r24, 0x07	; 7
     eb0:	91 05       	cpc	r25, r1
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <KeyPad_4x4_adjustKeyNumber+0x82>
     eb4:	3e c0       	rjmp	.+124    	; 0xf32 <KeyPad_4x4_adjustKeyNumber+0xfe>
     eb6:	37 c0       	rjmp	.+110    	; 0xf26 <KeyPad_4x4_adjustKeyNumber+0xf2>
     eb8:	2b 81       	ldd	r18, Y+3	; 0x03
     eba:	3c 81       	ldd	r19, Y+4	; 0x04
     ebc:	2c 30       	cpi	r18, 0x0C	; 12
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <KeyPad_4x4_adjustKeyNumber+0x90>
     ec2:	46 c0       	rjmp	.+140    	; 0xf50 <KeyPad_4x4_adjustKeyNumber+0x11c>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	8d 30       	cpi	r24, 0x0D	; 13
     eca:	91 05       	cpc	r25, r1
     ecc:	5c f4       	brge	.+22     	; 0xee4 <KeyPad_4x4_adjustKeyNumber+0xb0>
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	2a 30       	cpi	r18, 0x0A	; 10
     ed4:	31 05       	cpc	r19, r1
     ed6:	b1 f1       	breq	.+108    	; 0xf44 <KeyPad_4x4_adjustKeyNumber+0x110>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	8b 30       	cpi	r24, 0x0B	; 11
     ede:	91 05       	cpc	r25, r1
     ee0:	a4 f5       	brge	.+104    	; 0xf4a <KeyPad_4x4_adjustKeyNumber+0x116>
     ee2:	2d c0       	rjmp	.+90     	; 0xf3e <KeyPad_4x4_adjustKeyNumber+0x10a>
     ee4:	2b 81       	ldd	r18, Y+3	; 0x03
     ee6:	3c 81       	ldd	r19, Y+4	; 0x04
     ee8:	2e 30       	cpi	r18, 0x0E	; 14
     eea:	31 05       	cpc	r19, r1
     eec:	b9 f1       	breq	.+110    	; 0xf5c <KeyPad_4x4_adjustKeyNumber+0x128>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	8e 30       	cpi	r24, 0x0E	; 14
     ef4:	91 05       	cpc	r25, r1
     ef6:	7c f1       	brlt	.+94     	; 0xf56 <KeyPad_4x4_adjustKeyNumber+0x122>
     ef8:	2b 81       	ldd	r18, Y+3	; 0x03
     efa:	3c 81       	ldd	r19, Y+4	; 0x04
     efc:	2f 30       	cpi	r18, 0x0F	; 15
     efe:	31 05       	cpc	r19, r1
     f00:	79 f1       	breq	.+94     	; 0xf60 <KeyPad_4x4_adjustKeyNumber+0x12c>
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	80 31       	cpi	r24, 0x10	; 16
     f08:	91 05       	cpc	r25, r1
     f0a:	69 f1       	breq	.+90     	; 0xf66 <KeyPad_4x4_adjustKeyNumber+0x132>
     f0c:	2f c0       	rjmp	.+94     	; 0xf6c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	2e c0       	rjmp	.+92     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     f14:	28 e0       	ldi	r18, 0x08	; 8
     f16:	2a 83       	std	Y+2, r18	; 0x02
     f18:	2b c0       	rjmp	.+86     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     f1a:	39 e0       	ldi	r19, 0x09	; 9
     f1c:	3a 83       	std	Y+2, r19	; 0x02
     f1e:	28 c0       	rjmp	.+80     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     f20:	85 e2       	ldi	r24, 0x25	; 37
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	25 c0       	rjmp	.+74     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	22 c0       	rjmp	.+68     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     f2c:	25 e0       	ldi	r18, 0x05	; 5
     f2e:	2a 83       	std	Y+2, r18	; 0x02
     f30:	1f c0       	rjmp	.+62     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     f32:	36 e0       	ldi	r19, 0x06	; 6
     f34:	3a 83       	std	Y+2, r19	; 0x02
     f36:	1c c0       	rjmp	.+56     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     f38:	8a e2       	ldi	r24, 0x2A	; 42
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	19 c0       	rjmp	.+50     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     f44:	22 e0       	ldi	r18, 0x02	; 2
     f46:	2a 83       	std	Y+2, r18	; 0x02
     f48:	13 c0       	rjmp	.+38     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     f4a:	33 e0       	ldi	r19, 0x03	; 3
     f4c:	3a 83       	std	Y+2, r19	; 0x02
     f4e:	10 c0       	rjmp	.+32     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     f50:	8d e2       	ldi	r24, 0x2D	; 45
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     f56:	9d e0       	ldi	r25, 0x0D	; 13
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	0a c0       	rjmp	.+20     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     f60:	2d e3       	ldi	r18, 0x3D	; 61
     f62:	2a 83       	std	Y+2, r18	; 0x02
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     f66:	3b e2       	ldi	r19, 0x2B	; 43
     f68:	3a 83       	std	Y+2, r19	; 0x02
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     f88:	e7 e3       	ldi	r30, 0x37	; 55
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     f90:	a4 e3       	ldi	r26, 0x34	; 52
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e4 e3       	ldi	r30, 0x34	; 52
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 6e       	ori	r24, 0xE0	; 224
     f9c:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     f9e:	88 e3       	ldi	r24, 0x38	; 56
     fa0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     fa4:	8c e0       	ldi	r24, 0x0C	; 12
     fa6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_sendCommand>
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	e9 97       	sbiw	r28, 0x39	; 57
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	cd bf       	out	0x3d, r28	; 61
     fca:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     fcc:	a5 e3       	ldi	r26, 0x35	; 53
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e3       	ldi	r30, 0x35	; 53
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     fda:	a5 e3       	ldi	r26, 0x35	; 53
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e3       	ldi	r30, 0x35	; 53
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	8c 93       	st	X, r24
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e8       	ldi	r26, 0x80	; 128
     fee:	bf e3       	ldi	r27, 0x3F	; 63
     ff0:	8d ab       	std	Y+53, r24	; 0x35
     ff2:	9e ab       	std	Y+54, r25	; 0x36
     ff4:	af ab       	std	Y+55, r26	; 0x37
     ff6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6d a9       	ldd	r22, Y+53	; 0x35
     ffa:	7e a9       	ldd	r23, Y+54	; 0x36
     ffc:	8f a9       	ldd	r24, Y+55	; 0x37
     ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a e7       	ldi	r20, 0x7A	; 122
    1006:	53 e4       	ldi	r21, 0x43	; 67
    1008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	89 ab       	std	Y+49, r24	; 0x31
    1012:	9a ab       	std	Y+50, r25	; 0x32
    1014:	ab ab       	std	Y+51, r26	; 0x33
    1016:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1018:	69 a9       	ldd	r22, Y+49	; 0x31
    101a:	7a a9       	ldd	r23, Y+50	; 0x32
    101c:	8b a9       	ldd	r24, Y+51	; 0x33
    101e:	9c a9       	ldd	r25, Y+52	; 0x34
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <LCD_sendCommand+0x84>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    103a:	69 a9       	ldd	r22, Y+49	; 0x31
    103c:	7a a9       	ldd	r23, Y+50	; 0x32
    103e:	8b a9       	ldd	r24, Y+51	; 0x33
    1040:	9c a9       	ldd	r25, Y+52	; 0x34
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6d a9       	ldd	r22, Y+53	; 0x35
    1054:	7e a9       	ldd	r23, Y+54	; 0x36
    1056:	8f a9       	ldd	r24, Y+55	; 0x37
    1058:	98 ad       	ldd	r25, Y+56	; 0x38
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	98 ab       	std	Y+48, r25	; 0x30
    1078:	8f a7       	std	Y+47, r24	; 0x2f
    107a:	0f c0       	rjmp	.+30     	; 0x109a <LCD_sendCommand+0xe4>
    107c:	89 e1       	ldi	r24, 0x19	; 25
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9e a7       	std	Y+46, r25	; 0x2e
    1082:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1084:	8d a5       	ldd	r24, Y+45	; 0x2d
    1086:	9e a5       	ldd	r25, Y+46	; 0x2e
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <LCD_sendCommand+0xd2>
    108c:	9e a7       	std	Y+46, r25	; 0x2e
    108e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	8f a5       	ldd	r24, Y+47	; 0x2f
    1092:	98 a9       	ldd	r25, Y+48	; 0x30
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	98 ab       	std	Y+48, r25	; 0x30
    1098:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	8f a5       	ldd	r24, Y+47	; 0x2f
    109c:	98 a9       	ldd	r25, Y+48	; 0x30
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <LCD_sendCommand+0xc6>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	69 a9       	ldd	r22, Y+49	; 0x31
    10a6:	7a a9       	ldd	r23, Y+50	; 0x32
    10a8:	8b a9       	ldd	r24, Y+51	; 0x33
    10aa:	9c a9       	ldd	r25, Y+52	; 0x34
    10ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	98 ab       	std	Y+48, r25	; 0x30
    10b6:	8f a7       	std	Y+47, r24	; 0x2f
    10b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ba:	98 a9       	ldd	r25, Y+48	; 0x30
    10bc:	9c a7       	std	Y+44, r25	; 0x2c
    10be:	8b a7       	std	Y+43, r24	; 0x2b
    10c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <LCD_sendCommand+0x10e>
    10c8:	9c a7       	std	Y+44, r25	; 0x2c
    10ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e8       	ldi	r26, 0x80	; 128
    10e0:	bf e3       	ldi	r27, 0x3F	; 63
    10e2:	8f a3       	std	Y+39, r24	; 0x27
    10e4:	98 a7       	std	Y+40, r25	; 0x28
    10e6:	a9 a7       	std	Y+41, r26	; 0x29
    10e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	6f a1       	ldd	r22, Y+39	; 0x27
    10ec:	78 a5       	ldd	r23, Y+40	; 0x28
    10ee:	89 a5       	ldd	r24, Y+41	; 0x29
    10f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4a e7       	ldi	r20, 0x7A	; 122
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	8b a3       	std	Y+35, r24	; 0x23
    1104:	9c a3       	std	Y+36, r25	; 0x24
    1106:	ad a3       	std	Y+37, r26	; 0x25
    1108:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e8       	ldi	r20, 0x80	; 128
    1118:	5f e3       	ldi	r21, 0x3F	; 63
    111a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    111e:	88 23       	and	r24, r24
    1120:	2c f4       	brge	.+10     	; 0x112c <LCD_sendCommand+0x176>
		__ticks = 1;
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	3f c0       	rjmp	.+126    	; 0x11aa <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    112c:	6b a1       	ldd	r22, Y+35	; 0x23
    112e:	7c a1       	ldd	r23, Y+36	; 0x24
    1130:	8d a1       	ldd	r24, Y+37	; 0x25
    1132:	9e a1       	ldd	r25, Y+38	; 0x26
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	57 e4       	ldi	r21, 0x47	; 71
    113c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1140:	18 16       	cp	r1, r24
    1142:	4c f5       	brge	.+82     	; 0x1196 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	51 e4       	ldi	r21, 0x41	; 65
    1154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
    116c:	0f c0       	rjmp	.+30     	; 0x118c <LCD_sendCommand+0x1d6>
    116e:	89 e1       	ldi	r24, 0x19	; 25
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 a3       	std	Y+32, r25	; 0x20
    1174:	8f 8f       	std	Y+31, r24	; 0x1f
    1176:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1178:	98 a1       	ldd	r25, Y+32	; 0x20
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <LCD_sendCommand+0x1c4>
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	9a a1       	ldd	r25, Y+34	; 0x22
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9a a3       	std	Y+34, r25	; 0x22
    118a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	69 f7       	brne	.-38     	; 0x116e <LCD_sendCommand+0x1b8>
    1194:	14 c0       	rjmp	.+40     	; 0x11be <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1196:	6b a1       	ldd	r22, Y+35	; 0x23
    1198:	7c a1       	ldd	r23, Y+36	; 0x24
    119a:	8d a1       	ldd	r24, Y+37	; 0x25
    119c:	9e a1       	ldd	r25, Y+38	; 0x26
    119e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9a a3       	std	Y+34, r25	; 0x22
    11a8:	89 a3       	std	Y+33, r24	; 0x21
    11aa:	89 a1       	ldd	r24, Y+33	; 0x21
    11ac:	9a a1       	ldd	r25, Y+34	; 0x22
    11ae:	9e 8f       	std	Y+30, r25	; 0x1e
    11b0:	8d 8f       	std	Y+29, r24	; 0x1d
    11b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <LCD_sendCommand+0x200>
    11ba:	9e 8f       	std	Y+30, r25	; 0x1e
    11bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	89 ad       	ldd	r24, Y+57	; 0x39
    11c4:	80 83       	st	Z, r24
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 e8       	ldi	r26, 0x80	; 128
    11cc:	bf e3       	ldi	r27, 0x3F	; 63
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a e7       	ldi	r20, 0x7A	; 122
    11e4:	53 e4       	ldi	r21, 0x43	; 67
    11e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <LCD_sendCommand+0x262>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <LCD_sendCommand+0x2c2>
    125a:	89 e1       	ldi	r24, 0x19	; 25
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCD_sendCommand+0x2b0>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <LCD_sendCommand+0x2a4>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_sendCommand+0x2ec>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    12aa:	a5 e3       	ldi	r26, 0x35	; 53
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e5 e3       	ldi	r30, 0x35	; 53
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 77       	andi	r24, 0x7F	; 127
    12b6:	8c 93       	st	X, r24
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a0 e8       	ldi	r26, 0x80	; 128
    12be:	bf e3       	ldi	r27, 0x3F	; 63
    12c0:	8b 87       	std	Y+11, r24	; 0x0b
    12c2:	9c 87       	std	Y+12, r25	; 0x0c
    12c4:	ad 87       	std	Y+13, r26	; 0x0d
    12c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	4a e7       	ldi	r20, 0x7A	; 122
    12d6:	53 e4       	ldi	r21, 0x43	; 67
    12d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	8f 83       	std	Y+7, r24	; 0x07
    12e2:	98 87       	std	Y+8, r25	; 0x08
    12e4:	a9 87       	std	Y+9, r26	; 0x09
    12e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ea:	78 85       	ldd	r23, Y+8	; 0x08
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	5f e3       	ldi	r21, 0x3F	; 63
    12f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12fc:	88 23       	and	r24, r24
    12fe:	2c f4       	brge	.+10     	; 0x130a <LCD_sendCommand+0x354>
		__ticks = 1;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	3f c0       	rjmp	.+126    	; 0x1388 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    130a:	6f 81       	ldd	r22, Y+7	; 0x07
    130c:	78 85       	ldd	r23, Y+8	; 0x08
    130e:	89 85       	ldd	r24, Y+9	; 0x09
    1310:	9a 85       	ldd	r25, Y+10	; 0x0a
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	3f ef       	ldi	r19, 0xFF	; 255
    1316:	4f e7       	ldi	r20, 0x7F	; 127
    1318:	57 e4       	ldi	r21, 0x47	; 71
    131a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	4c f5       	brge	.+82     	; 0x1374 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e2       	ldi	r20, 0x20	; 32
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	0f c0       	rjmp	.+30     	; 0x136a <LCD_sendCommand+0x3b4>
    134c:	89 e1       	ldi	r24, 0x19	; 25
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <LCD_sendCommand+0x3a2>
    135c:	9c 83       	std	Y+4, r25	; 0x04
    135e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1360:	8d 81       	ldd	r24, Y+5	; 0x05
    1362:	9e 81       	ldd	r25, Y+6	; 0x06
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	69 f7       	brne	.-38     	; 0x134c <LCD_sendCommand+0x396>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	9e 83       	std	Y+6, r25	; 0x06
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <LCD_sendCommand+0x3de>
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    139c:	e9 96       	adiw	r28, 0x39	; 57
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	e9 97       	sbiw	r28, 0x39	; 57
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    13c4:	a5 e3       	ldi	r26, 0x35	; 53
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e5 e3       	ldi	r30, 0x35	; 53
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 62       	ori	r24, 0x20	; 32
    13d0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8f 7b       	andi	r24, 0xBF	; 191
    13de:	8c 93       	st	X, r24
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e8       	ldi	r26, 0x80	; 128
    13e6:	bf e3       	ldi	r27, 0x3F	; 63
    13e8:	8d ab       	std	Y+53, r24	; 0x35
    13ea:	9e ab       	std	Y+54, r25	; 0x36
    13ec:	af ab       	std	Y+55, r26	; 0x37
    13ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	6d a9       	ldd	r22, Y+53	; 0x35
    13f2:	7e a9       	ldd	r23, Y+54	; 0x36
    13f4:	8f a9       	ldd	r24, Y+55	; 0x37
    13f6:	98 ad       	ldd	r25, Y+56	; 0x38
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a e7       	ldi	r20, 0x7A	; 122
    13fe:	53 e4       	ldi	r21, 0x43	; 67
    1400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	89 ab       	std	Y+49, r24	; 0x31
    140a:	9a ab       	std	Y+50, r25	; 0x32
    140c:	ab ab       	std	Y+51, r26	; 0x33
    140e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1410:	69 a9       	ldd	r22, Y+49	; 0x31
    1412:	7a a9       	ldd	r23, Y+50	; 0x32
    1414:	8b a9       	ldd	r24, Y+51	; 0x33
    1416:	9c a9       	ldd	r25, Y+52	; 0x34
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	98 ab       	std	Y+48, r25	; 0x30
    142e:	8f a7       	std	Y+47, r24	; 0x2f
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1432:	69 a9       	ldd	r22, Y+49	; 0x31
    1434:	7a a9       	ldd	r23, Y+50	; 0x32
    1436:	8b a9       	ldd	r24, Y+51	; 0x33
    1438:	9c a9       	ldd	r25, Y+52	; 0x34
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6d a9       	ldd	r22, Y+53	; 0x35
    144c:	7e a9       	ldd	r23, Y+54	; 0x36
    144e:	8f a9       	ldd	r24, Y+55	; 0x37
    1450:	98 ad       	ldd	r25, Y+56	; 0x38
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	98 ab       	std	Y+48, r25	; 0x30
    1470:	8f a7       	std	Y+47, r24	; 0x2f
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <LCD_displayCharacter+0xe4>
    1474:	89 e1       	ldi	r24, 0x19	; 25
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9e a7       	std	Y+46, r25	; 0x2e
    147a:	8d a7       	std	Y+45, r24	; 0x2d
    147c:	8d a5       	ldd	r24, Y+45	; 0x2d
    147e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <LCD_displayCharacter+0xd2>
    1484:	9e a7       	std	Y+46, r25	; 0x2e
    1486:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	98 ab       	std	Y+48, r25	; 0x30
    1490:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	8f a5       	ldd	r24, Y+47	; 0x2f
    1494:	98 a9       	ldd	r25, Y+48	; 0x30
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <LCD_displayCharacter+0xc6>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	69 a9       	ldd	r22, Y+49	; 0x31
    149e:	7a a9       	ldd	r23, Y+50	; 0x32
    14a0:	8b a9       	ldd	r24, Y+51	; 0x33
    14a2:	9c a9       	ldd	r25, Y+52	; 0x34
    14a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	98 ab       	std	Y+48, r25	; 0x30
    14ae:	8f a7       	std	Y+47, r24	; 0x2f
    14b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b2:	98 a9       	ldd	r25, Y+48	; 0x30
    14b4:	9c a7       	std	Y+44, r25	; 0x2c
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
    14b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <LCD_displayCharacter+0x10e>
    14c0:	9c a7       	std	Y+44, r25	; 0x2c
    14c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    14c4:	a5 e3       	ldi	r26, 0x35	; 53
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e3       	ldi	r30, 0x35	; 53
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	8c 93       	st	X, r24
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e8       	ldi	r26, 0x80	; 128
    14d8:	bf e3       	ldi	r27, 0x3F	; 63
    14da:	8f a3       	std	Y+39, r24	; 0x27
    14dc:	98 a7       	std	Y+40, r25	; 0x28
    14de:	a9 a7       	std	Y+41, r26	; 0x29
    14e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e2:	6f a1       	ldd	r22, Y+39	; 0x27
    14e4:	78 a5       	ldd	r23, Y+40	; 0x28
    14e6:	89 a5       	ldd	r24, Y+41	; 0x29
    14e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a e7       	ldi	r20, 0x7A	; 122
    14f0:	53 e4       	ldi	r21, 0x43	; 67
    14f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8b a3       	std	Y+35, r24	; 0x23
    14fc:	9c a3       	std	Y+36, r25	; 0x24
    14fe:	ad a3       	std	Y+37, r26	; 0x25
    1500:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1502:	6b a1       	ldd	r22, Y+35	; 0x23
    1504:	7c a1       	ldd	r23, Y+36	; 0x24
    1506:	8d a1       	ldd	r24, Y+37	; 0x25
    1508:	9e a1       	ldd	r25, Y+38	; 0x26
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1516:	88 23       	and	r24, r24
    1518:	2c f4       	brge	.+10     	; 0x1524 <LCD_displayCharacter+0x176>
		__ticks = 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a a3       	std	Y+34, r25	; 0x22
    1520:	89 a3       	std	Y+33, r24	; 0x21
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1524:	6b a1       	ldd	r22, Y+35	; 0x23
    1526:	7c a1       	ldd	r23, Y+36	; 0x24
    1528:	8d a1       	ldd	r24, Y+37	; 0x25
    152a:	9e a1       	ldd	r25, Y+38	; 0x26
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1538:	18 16       	cp	r1, r24
    153a:	4c f5       	brge	.+82     	; 0x158e <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153c:	6f a1       	ldd	r22, Y+39	; 0x27
    153e:	78 a5       	ldd	r23, Y+40	; 0x28
    1540:	89 a5       	ldd	r24, Y+41	; 0x29
    1542:	9a a5       	ldd	r25, Y+42	; 0x2a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <LCD_displayCharacter+0x1d6>
    1566:	89 e1       	ldi	r24, 0x19	; 25
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	98 a3       	std	Y+32, r25	; 0x20
    156c:	8f 8f       	std	Y+31, r24	; 0x1f
    156e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1570:	98 a1       	ldd	r25, Y+32	; 0x20
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <LCD_displayCharacter+0x1c4>
    1576:	98 a3       	std	Y+32, r25	; 0x20
    1578:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157a:	89 a1       	ldd	r24, Y+33	; 0x21
    157c:	9a a1       	ldd	r25, Y+34	; 0x22
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9a a3       	std	Y+34, r25	; 0x22
    1582:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	89 a1       	ldd	r24, Y+33	; 0x21
    1586:	9a a1       	ldd	r25, Y+34	; 0x22
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	69 f7       	brne	.-38     	; 0x1566 <LCD_displayCharacter+0x1b8>
    158c:	14 c0       	rjmp	.+40     	; 0x15b6 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	6b a1       	ldd	r22, Y+35	; 0x23
    1590:	7c a1       	ldd	r23, Y+36	; 0x24
    1592:	8d a1       	ldd	r24, Y+37	; 0x25
    1594:	9e a1       	ldd	r25, Y+38	; 0x26
    1596:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9a a3       	std	Y+34, r25	; 0x22
    15a0:	89 a3       	std	Y+33, r24	; 0x21
    15a2:	89 a1       	ldd	r24, Y+33	; 0x21
    15a4:	9a a1       	ldd	r25, Y+34	; 0x22
    15a6:	9e 8f       	std	Y+30, r25	; 0x1e
    15a8:	8d 8f       	std	Y+29, r24	; 0x1d
    15aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <LCD_displayCharacter+0x200>
    15b2:	9e 8f       	std	Y+30, r25	; 0x1e
    15b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    15b6:	e8 e3       	ldi	r30, 0x38	; 56
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	89 ad       	ldd	r24, Y+57	; 0x39
    15bc:	80 83       	st	Z, r24
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e8       	ldi	r26, 0x80	; 128
    15c4:	bf e3       	ldi	r27, 0x3F	; 63
    15c6:	89 8f       	std	Y+25, r24	; 0x19
    15c8:	9a 8f       	std	Y+26, r25	; 0x1a
    15ca:	ab 8f       	std	Y+27, r26	; 0x1b
    15cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ce:	69 8d       	ldd	r22, Y+25	; 0x19
    15d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a e7       	ldi	r20, 0x7A	; 122
    15dc:	53 e4       	ldi	r21, 0x43	; 67
    15de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	8d 8b       	std	Y+21, r24	; 0x15
    15e8:	9e 8b       	std	Y+22, r25	; 0x16
    15ea:	af 8b       	std	Y+23, r26	; 0x17
    15ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ee:	6d 89       	ldd	r22, Y+21	; 0x15
    15f0:	7e 89       	ldd	r23, Y+22	; 0x16
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	2c f4       	brge	.+10     	; 0x1610 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9c 8b       	std	Y+20, r25	; 0x14
    160c:	8b 8b       	std	Y+19, r24	; 0x13
    160e:	3f c0       	rjmp	.+126    	; 0x168e <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1610:	6d 89       	ldd	r22, Y+21	; 0x15
    1612:	7e 89       	ldd	r23, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	4c f5       	brge	.+82     	; 0x167a <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1628:	69 8d       	ldd	r22, Y+25	; 0x19
    162a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e2       	ldi	r20, 0x20	; 32
    1636:	51 e4       	ldi	r21, 0x41	; 65
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	bc 01       	movw	r22, r24
    1642:	cd 01       	movw	r24, r26
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	8b 8b       	std	Y+19, r24	; 0x13
    1650:	0f c0       	rjmp	.+30     	; 0x1670 <LCD_displayCharacter+0x2c2>
    1652:	89 e1       	ldi	r24, 0x19	; 25
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9a 8b       	std	Y+18, r25	; 0x12
    1658:	89 8b       	std	Y+17, r24	; 0x11
    165a:	89 89       	ldd	r24, Y+17	; 0x11
    165c:	9a 89       	ldd	r25, Y+18	; 0x12
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_displayCharacter+0x2b0>
    1662:	9a 8b       	std	Y+18, r25	; 0x12
    1664:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	9c 8b       	std	Y+20, r25	; 0x14
    166e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	8b 89       	ldd	r24, Y+19	; 0x13
    1672:	9c 89       	ldd	r25, Y+20	; 0x14
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	69 f7       	brne	.-38     	; 0x1652 <LCD_displayCharacter+0x2a4>
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167a:	6d 89       	ldd	r22, Y+21	; 0x15
    167c:	7e 89       	ldd	r23, Y+22	; 0x16
    167e:	8f 89       	ldd	r24, Y+23	; 0x17
    1680:	98 8d       	ldd	r25, Y+24	; 0x18
    1682:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9c 8b       	std	Y+20, r25	; 0x14
    168c:	8b 8b       	std	Y+19, r24	; 0x13
    168e:	8b 89       	ldd	r24, Y+19	; 0x13
    1690:	9c 89       	ldd	r25, Y+20	; 0x14
    1692:	98 8b       	std	Y+16, r25	; 0x10
    1694:	8f 87       	std	Y+15, r24	; 0x0f
    1696:	8f 85       	ldd	r24, Y+15	; 0x0f
    1698:	98 89       	ldd	r25, Y+16	; 0x10
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <LCD_displayCharacter+0x2ec>
    169e:	98 8b       	std	Y+16, r25	; 0x10
    16a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    16a2:	a5 e3       	ldi	r26, 0x35	; 53
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8f 77       	andi	r24, 0x7F	; 127
    16ae:	8c 93       	st	X, r24
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a0 e8       	ldi	r26, 0x80	; 128
    16b6:	bf e3       	ldi	r27, 0x3F	; 63
    16b8:	8b 87       	std	Y+11, r24	; 0x0b
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	ad 87       	std	Y+13, r26	; 0x0d
    16be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	4a e7       	ldi	r20, 0x7A	; 122
    16ce:	53 e4       	ldi	r21, 0x43	; 67
    16d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	8f 83       	std	Y+7, r24	; 0x07
    16da:	98 87       	std	Y+8, r25	; 0x08
    16dc:	a9 87       	std	Y+9, r26	; 0x09
    16de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e8       	ldi	r20, 0x80	; 128
    16ee:	5f e3       	ldi	r21, 0x3F	; 63
    16f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16f4:	88 23       	and	r24, r24
    16f6:	2c f4       	brge	.+10     	; 0x1702 <LCD_displayCharacter+0x354>
		__ticks = 1;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	3f c0       	rjmp	.+126    	; 0x1780 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1702:	6f 81       	ldd	r22, Y+7	; 0x07
    1704:	78 85       	ldd	r23, Y+8	; 0x08
    1706:	89 85       	ldd	r24, Y+9	; 0x09
    1708:	9a 85       	ldd	r25, Y+10	; 0x0a
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	4c f5       	brge	.+82     	; 0x176c <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e2       	ldi	r20, 0x20	; 32
    1728:	51 e4       	ldi	r21, 0x41	; 65
    172a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	0f c0       	rjmp	.+30     	; 0x1762 <LCD_displayCharacter+0x3b4>
    1744:	89 e1       	ldi	r24, 0x19	; 25
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_displayCharacter+0x3a2>
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	69 f7       	brne	.-38     	; 0x1744 <LCD_displayCharacter+0x396>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9e 83       	std	Y+6, r25	; 0x06
    177e:	8d 83       	std	Y+5, r24	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <LCD_displayCharacter+0x3de>
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1794:	e9 96       	adiw	r28, 0x39	; 57
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <LCD_displayString+0x6>
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	9b 83       	std	Y+3, r25	; 0x03
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	fc 01       	movw	r30, r24
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_displayCharacter>
		i++;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	9b 81       	ldd	r25, Y+3	; 0x03
    17e0:	fc 01       	movw	r30, r24
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	80 81       	ld	r24, Z
    17e8:	88 23       	and	r24, r24
    17ea:	39 f7       	brne	.-50     	; 0x17ba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <LCD_goToRowColumn+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <LCD_goToRowColumn+0x8>
    1800:	0f 92       	push	r0
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	8a 83       	std	Y+2, r24	; 0x02
    1808:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3d 83       	std	Y+5, r19	; 0x05
    1812:	2c 83       	std	Y+4, r18	; 0x04
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	9d 81       	ldd	r25, Y+5	; 0x05
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	91 05       	cpc	r25, r1
    181c:	c1 f0       	breq	.+48     	; 0x184e <LCD_goToRowColumn+0x56>
    181e:	2c 81       	ldd	r18, Y+4	; 0x04
    1820:	3d 81       	ldd	r19, Y+5	; 0x05
    1822:	22 30       	cpi	r18, 0x02	; 2
    1824:	31 05       	cpc	r19, r1
    1826:	2c f4       	brge	.+10     	; 0x1832 <LCD_goToRowColumn+0x3a>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 f0       	breq	.+24     	; 0x1848 <LCD_goToRowColumn+0x50>
    1830:	19 c0       	rjmp	.+50     	; 0x1864 <LCD_goToRowColumn+0x6c>
    1832:	2c 81       	ldd	r18, Y+4	; 0x04
    1834:	3d 81       	ldd	r19, Y+5	; 0x05
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	69 f0       	breq	.+26     	; 0x1856 <LCD_goToRowColumn+0x5e>
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	9d 81       	ldd	r25, Y+5	; 0x05
    1840:	83 30       	cpi	r24, 0x03	; 3
    1842:	91 05       	cpc	r25, r1
    1844:	61 f0       	breq	.+24     	; 0x185e <LCD_goToRowColumn+0x66>
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	80 5c       	subi	r24, 0xC0	; 192
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	07 c0       	rjmp	.+14     	; 0x1864 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	80 5f       	subi	r24, 0xF0	; 240
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	80 5b       	subi	r24, 0xB0	; 176
    1862:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_sendCommand>
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <LCD_displayStringRowColumn+0x6>
    1882:	00 d0       	rcall	.+0      	; 0x1884 <LCD_displayStringRowColumn+0x8>
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	6a 83       	std	Y+2, r22	; 0x02
    188c:	5c 83       	std	Y+4, r21	; 0x04
    188e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	6a 81       	ldd	r22, Y+2	; 0x02
    1894:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	62 97       	sbiw	r28, 0x12	; 18
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	9a 8b       	std	Y+18, r25	; 0x12
    18c4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    18c6:	89 89       	ldd	r24, Y+17	; 0x11
    18c8:	9a 89       	ldd	r25, Y+18	; 0x12
    18ca:	9e 01       	movw	r18, r28
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	b9 01       	movw	r22, r18
    18d2:	4a e0       	ldi	r20, 0x0A	; 10
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	0e 94 13 1a 	call	0x3426	; 0x3426 <itoa>
   LCD_displayString(buff);
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
}
    18e2:	62 96       	adiw	r28, 0x12	; 18
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_sendCommand>
}
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <ResetPassword>:
#include "uart.h"
#define M2_READY 0x10
#define M1_READY 0x20
#define RESET 0x30

void ResetPassword(void){
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	ce 55       	subi	r28, 0x5E	; 94
    1916:	d0 40       	sbci	r29, 0x00	; 0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
	unsigned char keyy;
	uint8 k[5];
	uint8 oldPassword[6];
	char flag_unused;
	LCD_displayString("Reset  password");
    1922:	80 e6       	ldi	r24, 0x60	; 96
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    192a:	fe 01       	movw	r30, r28
    192c:	ed 5b       	subi	r30, 0xBD	; 189
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	aa ef       	ldi	r26, 0xFA	; 250
    1936:	b3 e4       	ldi	r27, 0x43	; 67
    1938:	80 83       	st	Z, r24
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	a2 83       	std	Z+2, r26	; 0x02
    193e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	8e 01       	movw	r16, r28
    1942:	01 5c       	subi	r16, 0xC1	; 193
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	ed 5b       	subi	r30, 0xBD	; 189
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a e7       	ldi	r20, 0x7A	; 122
    195a:	53 e4       	ldi	r21, 0x43	; 67
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196e:	fe 01       	movw	r30, r28
    1970:	ff 96       	adiw	r30, 0x3f	; 63
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <ResetPassword+0x8c>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	9e af       	std	Y+62, r25	; 0x3e
    1990:	8d af       	std	Y+61, r24	; 0x3d
    1992:	46 c0       	rjmp	.+140    	; 0x1a20 <ResetPassword+0x118>
	else if (__tmp > 65535)
    1994:	fe 01       	movw	r30, r28
    1996:	ff 96       	adiw	r30, 0x3f	; 63
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	64 f5       	brge	.+88     	; 0x1a08 <ResetPassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	fe 01       	movw	r30, r28
    19b2:	ed 5b       	subi	r30, 0xBD	; 189
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	93 81       	ldd	r25, Z+3	; 0x03
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e af       	std	Y+62, r25	; 0x3e
    19dc:	8d af       	std	Y+61, r24	; 0x3d
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <ResetPassword+0xf6>
    19e0:	89 e1       	ldi	r24, 0x19	; 25
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9c af       	std	Y+60, r25	; 0x3c
    19e6:	8b af       	std	Y+59, r24	; 0x3b
    19e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    19ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <ResetPassword+0xe4>
    19f0:	9c af       	std	Y+60, r25	; 0x3c
    19f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9e af       	std	Y+62, r25	; 0x3e
    19fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <ResetPassword+0xd8>
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <ResetPassword+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ff 96       	adiw	r30, 0x3f	; 63
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9e af       	std	Y+62, r25	; 0x3e
    1a1e:	8d af       	std	Y+61, r24	; 0x3d
    1a20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a24:	9a af       	std	Y+58, r25	; 0x3a
    1a26:	89 af       	std	Y+57, r24	; 0x39
    1a28:	89 ad       	ldd	r24, Y+57	; 0x39
    1a2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <ResetPassword+0x124>
    1a30:	9a af       	std	Y+58, r25	; 0x3a
    1a32:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	LCD_goToRowColumn(1,0);
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
	for(int i=0;i<5; i++)
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e1 5b       	subi	r30, 0xB1	; 177
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	11 82       	std	Z+1, r1	; 0x01
    1a44:	10 82       	st	Z, r1
    1a46:	98 c0       	rjmp	.+304    	; 0x1b78 <ResetPassword+0x270>
			{
				keyy = KeyPad_getPressedKey();
    1a48:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ed 5a       	subi	r30, 0xAD	; 173
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 83       	st	Z, r24
				k[i]=keyy;
    1a54:	fe 01       	movw	r30, r28
    1a56:	e1 5b       	subi	r30, 0xB1	; 177
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	20 81       	ld	r18, Z
    1a5c:	31 81       	ldd	r19, Z+1	; 0x01
    1a5e:	ce 01       	movw	r24, r28
    1a60:	8c 5a       	subi	r24, 0xAC	; 172
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	dc 01       	movw	r26, r24
    1a66:	a2 0f       	add	r26, r18
    1a68:	b3 1f       	adc	r27, r19
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 5a       	subi	r30, 0xAD	; 173
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	8c 93       	st	X, r24
					LCD_displayString("*");
    1a74:	80 e7       	ldi	r24, 0x70	; 112
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	aa ef       	ldi	r26, 0xFA	; 250
    1a82:	b3 e4       	ldi	r27, 0x43	; 67
    1a84:	8d ab       	std	Y+53, r24	; 0x35
    1a86:	9e ab       	std	Y+54, r25	; 0x36
    1a88:	af ab       	std	Y+55, r26	; 0x37
    1a8a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a90:	8f a9       	ldd	r24, Y+55	; 0x37
    1a92:	98 ad       	ldd	r25, Y+56	; 0x38
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4a e7       	ldi	r20, 0x7A	; 122
    1a9a:	53 e4       	ldi	r21, 0x43	; 67
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	89 ab       	std	Y+49, r24	; 0x31
    1aa6:	9a ab       	std	Y+50, r25	; 0x32
    1aa8:	ab ab       	std	Y+51, r26	; 0x33
    1aaa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aac:	69 a9       	ldd	r22, Y+49	; 0x31
    1aae:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <ResetPassword+0x1c6>
		__ticks = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	98 ab       	std	Y+48, r25	; 0x30
    1aca:	8f a7       	std	Y+47, r24	; 0x2f
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <ResetPassword+0x244>
	else if (__tmp > 65535)
    1ace:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	4c f5       	brge	.+82     	; 0x1b38 <ResetPassword+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aea:	8f a9       	ldd	r24, Y+55	; 0x37
    1aec:	98 ad       	ldd	r25, Y+56	; 0x38
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	98 ab       	std	Y+48, r25	; 0x30
    1b0c:	8f a7       	std	Y+47, r24	; 0x2f
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <ResetPassword+0x226>
    1b10:	89 e1       	ldi	r24, 0x19	; 25
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9e a7       	std	Y+46, r25	; 0x2e
    1b16:	8d a7       	std	Y+45, r24	; 0x2d
    1b18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <ResetPassword+0x214>
    1b20:	9e a7       	std	Y+46, r25	; 0x2e
    1b22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	98 ab       	std	Y+48, r25	; 0x30
    1b2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b30:	98 a9       	ldd	r25, Y+48	; 0x30
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	69 f7       	brne	.-38     	; 0x1b10 <ResetPassword+0x208>
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <ResetPassword+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
    1b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b50:	9c a7       	std	Y+44, r25	; 0x2c
    1b52:	8b a7       	std	Y+43, r24	; 0x2b
    1b54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <ResetPassword+0x250>
    1b5c:	9c a7       	std	Y+44, r25	; 0x2c
    1b5e:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 oldPassword[6];
	char flag_unused;
	LCD_displayString("Reset  password");
	_delay_ms(500);
	LCD_goToRowColumn(1,0);
	for(int i=0;i<5; i++)
    1b60:	de 01       	movw	r26, r28
    1b62:	a1 5b       	subi	r26, 0xB1	; 177
    1b64:	bf 4f       	sbci	r27, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	e1 5b       	subi	r30, 0xB1	; 177
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e1 5b       	subi	r30, 0xB1	; 177
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	85 30       	cpi	r24, 0x05	; 5
    1b84:	91 05       	cpc	r25, r1
    1b86:	0c f4       	brge	.+2      	; 0x1b8a <ResetPassword+0x282>
    1b88:	5f cf       	rjmp	.-322    	; 0x1a48 <ResetPassword+0x140>
				keyy = KeyPad_getPressedKey();
				k[i]=keyy;
					LCD_displayString("*");
							_delay_ms(500);
			}
	UART_sendByte(M1_READY);
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
	while(UART_recieveByte() != M2_READY){}
    1b90:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    1b94:	80 31       	cpi	r24, 0x10	; 16
    1b96:	e1 f7       	brne	.-8      	; 0x1b90 <ResetPassword+0x288>
	UART_sendByte(0x0f); //to skip the reset condition in main 2
    1b98:	8f e0       	ldi	r24, 0x0F	; 15
    1b9a:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>

	UART_sendByte(M1_READY);
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
	while(UART_recieveByte() != M2_READY){}
    1ba4:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    1ba8:	80 31       	cpi	r24, 0x10	; 16
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <ResetPassword+0x29c>
	flag_unused = UART_recieveByte(); //receive the unused flag
    1bac:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	ee 5a       	subi	r30, 0xAE	; 174
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 83       	st	Z, r24
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	aa ef       	ldi	r26, 0xFA	; 250
    1bbe:	b3 e4       	ldi	r27, 0x43	; 67
    1bc0:	8f a3       	std	Y+39, r24	; 0x27
    1bc2:	98 a7       	std	Y+40, r25	; 0x28
    1bc4:	a9 a7       	std	Y+41, r26	; 0x29
    1bc6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bca:	78 a5       	ldd	r23, Y+40	; 0x28
    1bcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1bce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a e7       	ldi	r20, 0x7A	; 122
    1bd6:	53 e4       	ldi	r21, 0x43	; 67
    1bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8b a3       	std	Y+35, r24	; 0x23
    1be2:	9c a3       	std	Y+36, r25	; 0x24
    1be4:	ad a3       	std	Y+37, r26	; 0x25
    1be6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <ResetPassword+0x302>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9a a3       	std	Y+34, r25	; 0x22
    1c06:	89 a3       	std	Y+33, r24	; 0x21
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <ResetPassword+0x380>
	else if (__tmp > 65535)
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <ResetPassword+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6f a1       	ldd	r22, Y+39	; 0x27
    1c24:	78 a5       	ldd	r23, Y+40	; 0x28
    1c26:	89 a5       	ldd	r24, Y+41	; 0x29
    1c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9a a3       	std	Y+34, r25	; 0x22
    1c48:	89 a3       	std	Y+33, r24	; 0x21
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <ResetPassword+0x362>
    1c4c:	89 e1       	ldi	r24, 0x19	; 25
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	98 a3       	std	Y+32, r25	; 0x20
    1c52:	8f 8f       	std	Y+31, r24	; 0x1f
    1c54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c56:	98 a1       	ldd	r25, Y+32	; 0x20
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <ResetPassword+0x350>
    1c5c:	98 a3       	std	Y+32, r25	; 0x20
    1c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	89 a1       	ldd	r24, Y+33	; 0x21
    1c62:	9a a1       	ldd	r25, Y+34	; 0x22
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <ResetPassword+0x344>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <ResetPassword+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6b a1       	ldd	r22, Y+35	; 0x23
    1c76:	7c a1       	ldd	r23, Y+36	; 0x24
    1c78:	8d a1       	ldd	r24, Y+37	; 0x25
    1c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1c90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <ResetPassword+0x38c>
    1c98:	9e 8f       	std	Y+30, r25	; 0x1e
    1c9a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_displayString("k");
    1c9c:	82 e7       	ldi	r24, 0x72	; 114
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
	for(int i=0;i<5; i++)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e3 5b       	subi	r30, 0xB3	; 179
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	11 82       	std	Z+1, r1	; 0x01
    1cac:	10 82       	st	Z, r1
    1cae:	29 c0       	rjmp	.+82     	; 0x1d02 <ResetPassword+0x3fa>
	{

		UART_sendByte(M1_READY);
    1cb0:	80 e2       	ldi	r24, 0x20	; 32
    1cb2:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
		while(UART_recieveByte() != M2_READY){}
    1cb6:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    1cba:	80 31       	cpi	r24, 0x10	; 16
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <ResetPassword+0x3ae>

		oldPassword[i]	=UART_recieveByte();
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e3 5b       	subi	r30, 0xB3	; 179
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	00 81       	ld	r16, Z
    1cc6:	11 81       	ldd	r17, Z+1	; 0x01
    1cc8:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    1ccc:	28 2f       	mov	r18, r24
    1cce:	ce 01       	movw	r24, r28
    1cd0:	87 5a       	subi	r24, 0xA7	; 167
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	e0 0f       	add	r30, r16
    1cd8:	f1 1f       	adc	r31, r17
    1cda:	20 83       	st	Z, r18
		LCD_intgerToString(i);
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e3 5b       	subi	r30, 0xB3	; 179
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
	UART_sendByte(M1_READY);
	while(UART_recieveByte() != M2_READY){}
	flag_unused = UART_recieveByte(); //receive the unused flag
	_delay_ms(500);
	LCD_displayString("k");
	for(int i=0;i<5; i++)
    1cea:	de 01       	movw	r26, r28
    1cec:	a3 5b       	subi	r26, 0xB3	; 179
    1cee:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e3 5b       	subi	r30, 0xB3	; 179
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 93       	st	X, r25
    1d00:	8e 93       	st	-X, r24
    1d02:	fe 01       	movw	r30, r28
    1d04:	e3 5b       	subi	r30, 0xB3	; 179
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	91 05       	cpc	r25, r1
    1d10:	7c f2       	brlt	.-98     	; 0x1cb0 <ResetPassword+0x3a8>

		oldPassword[i]	=UART_recieveByte();
		LCD_intgerToString(i);

	}
	LCD_displayString("m");
    1d12:	84 e7       	ldi	r24, 0x74	; 116
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
	{
		_delay_ms(10);
		LCD_intgerToString(oldPassword[i]);

	}*/
	unsigned char is_true = 1;
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ef 5a       	subi	r30, 0xAF	; 175
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 83       	st	Z, r24
	LCD_clearScreen();
    1d24:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
	for(int i=0;i<5; i++){
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e5 5b       	subi	r30, 0xB5	; 181
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	11 82       	std	Z+1, r1	; 0x01
    1d30:	10 82       	st	Z, r1
    1d32:	bd c0       	rjmp	.+378    	; 0x1eae <ResetPassword+0x5a6>
		LCD_intgerToString(oldPassword[i]);
    1d34:	fe 01       	movw	r30, r28
    1d36:	e5 5b       	subi	r30, 0xB5	; 181
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	20 81       	ld	r18, Z
    1d3c:	31 81       	ldd	r19, Z+1	; 0x01
    1d3e:	ce 01       	movw	r24, r28
    1d40:	87 5a       	subi	r24, 0xA7	; 167
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	80 81       	ld	r24, Z
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
		LCD_intgerToString(k[i]);
    1d54:	fe 01       	movw	r30, r28
    1d56:	e5 5b       	subi	r30, 0xB5	; 181
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	20 81       	ld	r18, Z
    1d5c:	31 81       	ldd	r19, Z+1	; 0x01
    1d5e:	ce 01       	movw	r24, r28
    1d60:	8c 5a       	subi	r24, 0xAC	; 172
    1d62:	9f 4f       	sbci	r25, 0xFF	; 255
    1d64:	fc 01       	movw	r30, r24
    1d66:	e2 0f       	add	r30, r18
    1d68:	f3 1f       	adc	r31, r19
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 2f       	mov	r24, r24
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	aa ef       	ldi	r26, 0xFA	; 250
    1d7a:	b4 e4       	ldi	r27, 0x44	; 68
    1d7c:	89 8f       	std	Y+25, r24	; 0x19
    1d7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d80:	ab 8f       	std	Y+27, r26	; 0x1b
    1d82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	69 8d       	ldd	r22, Y+25	; 0x19
    1d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	4a e7       	ldi	r20, 0x7A	; 122
    1d92:	53 e4       	ldi	r21, 0x43	; 67
    1d94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	8d 8b       	std	Y+21, r24	; 0x15
    1d9e:	9e 8b       	std	Y+22, r25	; 0x16
    1da0:	af 8b       	std	Y+23, r26	; 0x17
    1da2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	2c f4       	brge	.+10     	; 0x1dc6 <ResetPassword+0x4be>
		__ticks = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	8b 8b       	std	Y+19, r24	; 0x13
    1dc4:	3f c0       	rjmp	.+126    	; 0x1e44 <ResetPassword+0x53c>
	else if (__tmp > 65535)
    1dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	3f ef       	ldi	r19, 0xFF	; 255
    1dd2:	4f e7       	ldi	r20, 0x7F	; 127
    1dd4:	57 e4       	ldi	r21, 0x47	; 71
    1dd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	4c f5       	brge	.+82     	; 0x1e30 <ResetPassword+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dde:	69 8d       	ldd	r22, Y+25	; 0x19
    1de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	bc 01       	movw	r22, r24
    1df8:	cd 01       	movw	r24, r26
    1dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <ResetPassword+0x51e>
    1e08:	89 e1       	ldi	r24, 0x19	; 25
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9a 8b       	std	Y+18, r25	; 0x12
    1e0e:	89 8b       	std	Y+17, r24	; 0x11
    1e10:	89 89       	ldd	r24, Y+17	; 0x11
    1e12:	9a 89       	ldd	r25, Y+18	; 0x12
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <ResetPassword+0x50c>
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	9c 8b       	std	Y+20, r25	; 0x14
    1e24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e26:	8b 89       	ldd	r24, Y+19	; 0x13
    1e28:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <ResetPassword+0x500>
    1e2e:	14 c0       	rjmp	.+40     	; 0x1e58 <ResetPassword+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	98 8b       	std	Y+16, r25	; 0x10
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <ResetPassword+0x548>
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		if (oldPassword[i]!=k[i]){
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e5 5b       	subi	r30, 0xB5	; 181
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	20 81       	ld	r18, Z
    1e60:	31 81       	ldd	r19, Z+1	; 0x01
    1e62:	ce 01       	movw	r24, r28
    1e64:	87 5a       	subi	r24, 0xA7	; 167
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	40 81       	ld	r20, Z
    1e70:	fe 01       	movw	r30, r28
    1e72:	e5 5b       	subi	r30, 0xB5	; 181
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	20 81       	ld	r18, Z
    1e78:	31 81       	ldd	r19, Z+1	; 0x01
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	8c 5a       	subi	r24, 0xAC	; 172
    1e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e80:	fc 01       	movw	r30, r24
    1e82:	e2 0f       	add	r30, r18
    1e84:	f3 1f       	adc	r31, r19
    1e86:	80 81       	ld	r24, Z
    1e88:	48 17       	cp	r20, r24
    1e8a:	29 f0       	breq	.+10     	; 0x1e96 <ResetPassword+0x58e>
			is_true=0;
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ef 5a       	subi	r30, 0xAF	; 175
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	10 82       	st	Z, r1
    1e94:	15 c0       	rjmp	.+42     	; 0x1ec0 <ResetPassword+0x5b8>
		LCD_intgerToString(oldPassword[i]);

	}*/
	unsigned char is_true = 1;
	LCD_clearScreen();
	for(int i=0;i<5; i++){
    1e96:	de 01       	movw	r26, r28
    1e98:	a5 5b       	subi	r26, 0xB5	; 181
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e5 5b       	subi	r30, 0xB5	; 181
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	91 81       	ldd	r25, Z+1	; 0x01
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e5 5b       	subi	r30, 0xB5	; 181
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	85 30       	cpi	r24, 0x05	; 5
    1eba:	91 05       	cpc	r25, r1
    1ebc:	0c f4       	brge	.+2      	; 0x1ec0 <ResetPassword+0x5b8>
    1ebe:	3a cf       	rjmp	.-396    	; 0x1d34 <ResetPassword+0x42c>
		if (oldPassword[i]!=k[i]){
			is_true=0;
			break;
		}
	}
	if (is_true==0){
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ef 5a       	subi	r30, 0xAF	; 175
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 23       	and	r24, r24
    1eca:	39 f4       	brne	.+14     	; 0x1eda <ResetPassword+0x5d2>
		LCD_clearScreen();
    1ecc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
		LCD_displayString("Wrong Password");
    1ed0:	86 e7       	ldi	r24, 0x76	; 118
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    1ed8:	0e c1       	rjmp	.+540    	; 0x20f6 <ResetPassword+0x7ee>
	}else if(is_true==1){
    1eda:	fe 01       	movw	r30, r28
    1edc:	ef 5a       	subi	r30, 0xAF	; 175
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <ResetPassword+0x5e0>
    1ee6:	07 c1       	rjmp	.+526    	; 0x20f6 <ResetPassword+0x7ee>
		LCD_clearScreen();
    1ee8:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
		LCD_displayString("Enter New Password");
    1eec:	85 e8       	ldi	r24, 0x85	; 133
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
		for(int i=0;i<5; i++)
    1efc:	fe 01       	movw	r30, r28
    1efe:	e7 5b       	subi	r30, 0xB7	; 183
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	11 82       	std	Z+1, r1	; 0x01
    1f04:	10 82       	st	Z, r1
    1f06:	a4 c0       	rjmp	.+328    	; 0x2050 <ResetPassword+0x748>
		{
			keyy = KeyPad_getPressedKey();
    1f08:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 5a       	subi	r30, 0xAD	; 173
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 83       	st	Z, r24
			k[i]=keyy;
    1f14:	fe 01       	movw	r30, r28
    1f16:	e7 5b       	subi	r30, 0xB7	; 183
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	20 81       	ld	r18, Z
    1f1c:	31 81       	ldd	r19, Z+1	; 0x01
    1f1e:	ce 01       	movw	r24, r28
    1f20:	8c 5a       	subi	r24, 0xAC	; 172
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	dc 01       	movw	r26, r24
    1f26:	a2 0f       	add	r26, r18
    1f28:	b3 1f       	adc	r27, r19
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	ed 5a       	subi	r30, 0xAD	; 173
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	8c 93       	st	X, r24
			LCD_intgerToString(k[i]);
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 5b       	subi	r30, 0xB7	; 183
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	20 81       	ld	r18, Z
    1f3c:	31 81       	ldd	r19, Z+1	; 0x01
    1f3e:	ce 01       	movw	r24, r28
    1f40:	8c 5a       	subi	r24, 0xAC	; 172
    1f42:	9f 4f       	sbci	r25, 0xFF	; 255
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 0f       	add	r30, r18
    1f48:	f3 1f       	adc	r31, r19
    1f4a:	80 81       	ld	r24, Z
    1f4c:	88 2f       	mov	r24, r24
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	aa ef       	ldi	r26, 0xFA	; 250
    1f5a:	b3 e4       	ldi	r27, 0x43	; 67
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	9c 87       	std	Y+12, r25	; 0x0c
    1f60:	ad 87       	std	Y+13, r26	; 0x0d
    1f62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a e7       	ldi	r20, 0x7A	; 122
    1f72:	53 e4       	ldi	r21, 0x43	; 67
    1f74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8f 83       	std	Y+7, r24	; 0x07
    1f7e:	98 87       	std	Y+8, r25	; 0x08
    1f80:	a9 87       	std	Y+9, r26	; 0x09
    1f82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <ResetPassword+0x69e>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <ResetPassword+0x71c>
	else if (__tmp > 65535)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <ResetPassword+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <ResetPassword+0x6fe>
    1fe8:	89 e1       	ldi	r24, 0x19	; 25
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <ResetPassword+0x6ec>
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <ResetPassword+0x6e0>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <ResetPassword+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	8d 81       	ldd	r24, Y+5	; 0x05
    2026:	9e 81       	ldd	r25, Y+6	; 0x06
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <ResetPassword+0x728>
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayString("Wrong Password");
	}else if(is_true==1){
		LCD_clearScreen();
		LCD_displayString("Enter New Password");
		LCD_goToRowColumn(1,0);
		for(int i=0;i<5; i++)
    2038:	de 01       	movw	r26, r28
    203a:	a7 5b       	subi	r26, 0xB7	; 183
    203c:	bf 4f       	sbci	r27, 0xFF	; 255
    203e:	fe 01       	movw	r30, r28
    2040:	e7 5b       	subi	r30, 0xB7	; 183
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
    2050:	fe 01       	movw	r30, r28
    2052:	e7 5b       	subi	r30, 0xB7	; 183
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	85 30       	cpi	r24, 0x05	; 5
    205c:	91 05       	cpc	r25, r1
    205e:	0c f4       	brge	.+2      	; 0x2062 <ResetPassword+0x75a>
    2060:	53 cf       	rjmp	.-346    	; 0x1f08 <ResetPassword+0x600>
			keyy = KeyPad_getPressedKey();
			k[i]=keyy;
			LCD_intgerToString(k[i]);
			_delay_ms(500);
		}
		UART_sendByte(M1_READY);
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
		while(UART_recieveByte() != M2_READY){}
    2068:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    206c:	80 31       	cpi	r24, 0x10	; 16
    206e:	e1 f7       	brne	.-8      	; 0x2068 <ResetPassword+0x760>
		LCD_displayString("m");
    2070:	84 e7       	ldi	r24, 0x74	; 116
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>

		UART_sendByte(RESET);
    2078:	80 e3       	ldi	r24, 0x30	; 48
    207a:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>

		for(int j=0;j<5;j++){
    207e:	fe 01       	movw	r30, r28
    2080:	e9 5b       	subi	r30, 0xB9	; 185
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	11 82       	std	Z+1, r1	; 0x01
    2086:	10 82       	st	Z, r1
    2088:	28 c0       	rjmp	.+80     	; 0x20da <ResetPassword+0x7d2>
			UART_sendByte(M1_READY);
    208a:	80 e2       	ldi	r24, 0x20	; 32
    208c:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
			while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
    2090:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    2094:	80 31       	cpi	r24, 0x10	; 16
    2096:	e1 f7       	brne	.-8      	; 0x2090 <ResetPassword+0x788>

			UART_sendByte(k[j]);
    2098:	fe 01       	movw	r30, r28
    209a:	e9 5b       	subi	r30, 0xB9	; 185
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	20 81       	ld	r18, Z
    20a0:	31 81       	ldd	r19, Z+1	; 0x01
    20a2:	ce 01       	movw	r24, r28
    20a4:	8c 5a       	subi	r24, 0xAC	; 172
    20a6:	9f 4f       	sbci	r25, 0xFF	; 255
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	80 81       	ld	r24, Z
    20b0:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
			LCD_intgerToString(j);
    20b4:	fe 01       	movw	r30, r28
    20b6:	e9 5b       	subi	r30, 0xB9	; 185
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
		while(UART_recieveByte() != M2_READY){}
		LCD_displayString("m");

		UART_sendByte(RESET);

		for(int j=0;j<5;j++){
    20c2:	de 01       	movw	r26, r28
    20c4:	a9 5b       	subi	r26, 0xB9	; 185
    20c6:	bf 4f       	sbci	r27, 0xFF	; 255
    20c8:	fe 01       	movw	r30, r28
    20ca:	e9 5b       	subi	r30, 0xB9	; 185
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	11 96       	adiw	r26, 0x01	; 1
    20d6:	9c 93       	st	X, r25
    20d8:	8e 93       	st	-X, r24
    20da:	fe 01       	movw	r30, r28
    20dc:	e9 5b       	subi	r30, 0xB9	; 185
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	85 30       	cpi	r24, 0x05	; 5
    20e6:	91 05       	cpc	r25, r1
    20e8:	84 f2       	brlt	.-96     	; 0x208a <ResetPassword+0x782>

			UART_sendByte(k[j]);
			LCD_intgerToString(j);

}
		LCD_clearScreen();
    20ea:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
		LCD_displayString("Password Reset Succ");
    20ee:	88 e9       	ldi	r24, 0x98	; 152
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
	}
}
    20f6:	c2 5a       	subi	r28, 0xA2	; 162
    20f8:	df 4f       	sbci	r29, 0xFF	; 255
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	08 95       	ret

0000210e <main>:
int main(void)
{
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	ce 5c       	subi	r28, 0xCE	; 206
    211c:	d0 40       	sbci	r29, 0x00	; 0
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;
	unsigned char keyy;
	UART_init();
    2128:	0e 94 30 19 	call	0x3260	; 0x3260 <UART_init>
	LCD_init();
    212c:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_init>
	uint8 oldPassword[8];


	while(1)
	{
		unsigned char press=KeyPad_getPressedKey();
    2130:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    2134:	fe 01       	movw	r30, r28
    2136:	e5 55       	subi	r30, 0x55	; 85
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 83       	st	Z, r24
		LCD_clearScreen();
    213c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
		LCD_intgerToString(press);
    2140:	fe 01       	movw	r30, r28
    2142:	e5 55       	subi	r30, 0x55	; 85
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
    2150:	fe 01       	movw	r30, r28
    2152:	e9 56       	subi	r30, 0x69	; 105
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e4       	ldi	r25, 0x40	; 64
    215a:	ac e9       	ldi	r26, 0x9C	; 156
    215c:	b6 e4       	ldi	r27, 0x46	; 70
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	8e 01       	movw	r16, r28
    2168:	0d 56       	subi	r16, 0x6D	; 109
    216a:	1f 4f       	sbci	r17, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	e9 56       	subi	r30, 0x69	; 105
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	53 e4       	ldi	r21, 0x43	; 67
    2182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	f8 01       	movw	r30, r16
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	a2 83       	std	Z+2, r26	; 0x02
    2192:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2194:	fe 01       	movw	r30, r28
    2196:	ed 56       	subi	r30, 0x6D	; 109
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	44 f4       	brge	.+16     	; 0x21c2 <main+0xb4>
		__ticks = 1;
    21b2:	fe 01       	movw	r30, r28
    21b4:	ef 56       	subi	r30, 0x6F	; 111
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	64 c0       	rjmp	.+200    	; 0x228a <main+0x17c>
	else if (__tmp > 65535)
    21c2:	fe 01       	movw	r30, r28
    21c4:	ed 56       	subi	r30, 0x6D	; 109
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	60 81       	ld	r22, Z
    21ca:	71 81       	ldd	r23, Z+1	; 0x01
    21cc:	82 81       	ldd	r24, Z+2	; 0x02
    21ce:	93 81       	ldd	r25, Z+3	; 0x03
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	3f ef       	ldi	r19, 0xFF	; 255
    21d4:	4f e7       	ldi	r20, 0x7F	; 127
    21d6:	57 e4       	ldi	r21, 0x47	; 71
    21d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21dc:	18 16       	cp	r1, r24
    21de:	0c f0       	brlt	.+2      	; 0x21e2 <main+0xd4>
    21e0:	43 c0       	rjmp	.+134    	; 0x2268 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e2:	fe 01       	movw	r30, r28
    21e4:	e9 56       	subi	r30, 0x69	; 105
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	8e 01       	movw	r16, r28
    2202:	0f 56       	subi	r16, 0x6F	; 111
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
    2218:	1f c0       	rjmp	.+62     	; 0x2258 <main+0x14a>
    221a:	fe 01       	movw	r30, r28
    221c:	e1 57       	subi	r30, 0x71	; 113
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	89 e1       	ldi	r24, 0x19	; 25
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	fe 01       	movw	r30, r28
    222a:	e1 57       	subi	r30, 0x71	; 113
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <main+0x124>
    2236:	fe 01       	movw	r30, r28
    2238:	e1 57       	subi	r30, 0x71	; 113
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	de 01       	movw	r26, r28
    2242:	af 56       	subi	r26, 0x6F	; 111
    2244:	bf 4f       	sbci	r27, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	ef 56       	subi	r30, 0x6F	; 111
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	9c 93       	st	X, r25
    2256:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	fe 01       	movw	r30, r28
    225a:	ef 56       	subi	r30, 0x6F	; 111
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	d1 f6       	brne	.-76     	; 0x221a <main+0x10c>
    2266:	27 c0       	rjmp	.+78     	; 0x22b6 <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	8e 01       	movw	r16, r28
    226a:	0f 56       	subi	r16, 0x6F	; 111
    226c:	1f 4f       	sbci	r17, 0xFF	; 255
    226e:	fe 01       	movw	r30, r28
    2270:	ed 56       	subi	r30, 0x6D	; 109
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	f8 01       	movw	r30, r16
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	de 01       	movw	r26, r28
    228c:	a3 57       	subi	r26, 0x73	; 115
    228e:	bf 4f       	sbci	r27, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	ef 56       	subi	r30, 0x6F	; 111
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	8d 93       	st	X+, r24
    229c:	9c 93       	st	X, r25
    229e:	fe 01       	movw	r30, r28
    22a0:	e3 57       	subi	r30, 0x73	; 115
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	91 81       	ldd	r25, Z+1	; 0x01
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <main+0x19a>
    22ac:	fe 01       	movw	r30, r28
    22ae:	e3 57       	subi	r30, 0x73	; 115
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
		_delay_ms(20000);
		LCD_clearScreen();
    22b6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
		if(press==0){
    22ba:	fe 01       	movw	r30, r28
    22bc:	e5 55       	subi	r30, 0x55	; 85
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	80 81       	ld	r24, Z
    22c2:	88 23       	and	r24, r24
    22c4:	29 f4       	brne	.+10     	; 0x22d0 <main+0x1c2>
			LCD_clearScreen();
    22c6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <LCD_clearScreen>
			ResetPassword();
    22ca:	0e 94 84 0c 	call	0x1908	; 0x1908 <ResetPassword>
    22ce:	30 cf       	rjmp	.-416    	; 0x2130 <main+0x22>
		}
		else{
		UART_sendByte(M1_READY);
    22d0:	80 e2       	ldi	r24, 0x20	; 32
    22d2:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
		while(UART_recieveByte() != M2_READY){}
    22d6:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    22da:	80 31       	cpi	r24, 0x10	; 16
    22dc:	e1 f7       	brne	.-8      	; 0x22d6 <main+0x1c8>
		UART_sendByte(0x0f); //to skip the reset condition in main 2
    22de:	8f e0       	ldi	r24, 0x0F	; 15
    22e0:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
    22e4:	fe 01       	movw	r30, r28
    22e6:	e7 57       	subi	r30, 0x77	; 119
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	aa ef       	ldi	r26, 0xFA	; 250
    22f0:	b3 e4       	ldi	r27, 0x43	; 67
    22f2:	80 83       	st	Z, r24
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	a2 83       	std	Z+2, r26	; 0x02
    22f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	8e 01       	movw	r16, r28
    22fc:	0b 57       	subi	r16, 0x7B	; 123
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	e7 57       	subi	r30, 0x77	; 119
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	53 e4       	ldi	r21, 0x43	; 67
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	f8 01       	movw	r30, r16
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	a2 83       	std	Z+2, r26	; 0x02
    2326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2328:	fe 01       	movw	r30, r28
    232a:	eb 57       	subi	r30, 0x7B	; 123
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	60 81       	ld	r22, Z
    2330:	71 81       	ldd	r23, Z+1	; 0x01
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	44 f4       	brge	.+16     	; 0x2356 <main+0x248>
		__ticks = 1;
    2346:	fe 01       	movw	r30, r28
    2348:	ed 57       	subi	r30, 0x7D	; 125
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
    2354:	64 c0       	rjmp	.+200    	; 0x241e <main+0x310>
	else if (__tmp > 65535)
    2356:	fe 01       	movw	r30, r28
    2358:	eb 57       	subi	r30, 0x7B	; 123
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	0c f0       	brlt	.+2      	; 0x2376 <main+0x268>
    2374:	43 c0       	rjmp	.+134    	; 0x23fc <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	fe 01       	movw	r30, r28
    2378:	e7 57       	subi	r30, 0x77	; 119
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8e 01       	movw	r16, r28
    2396:	0d 57       	subi	r16, 0x7D	; 125
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	f8 01       	movw	r30, r16
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
    23ac:	1f c0       	rjmp	.+62     	; 0x23ec <main+0x2de>
    23ae:	fe 01       	movw	r30, r28
    23b0:	ef 57       	subi	r30, 0x7F	; 127
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	89 e1       	ldi	r24, 0x19	; 25
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
    23bc:	fe 01       	movw	r30, r28
    23be:	ef 57       	subi	r30, 0x7F	; 127
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <main+0x2b8>
    23ca:	fe 01       	movw	r30, r28
    23cc:	ef 57       	subi	r30, 0x7F	; 127
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	de 01       	movw	r26, r28
    23d6:	ad 57       	subi	r26, 0x7D	; 125
    23d8:	bf 4f       	sbci	r27, 0xFF	; 255
    23da:	fe 01       	movw	r30, r28
    23dc:	ed 57       	subi	r30, 0x7D	; 125
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	11 96       	adiw	r26, 0x01	; 1
    23e8:	9c 93       	st	X, r25
    23ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ec:	fe 01       	movw	r30, r28
    23ee:	ed 57       	subi	r30, 0x7D	; 125
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	91 81       	ldd	r25, Z+1	; 0x01
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	d1 f6       	brne	.-76     	; 0x23ae <main+0x2a0>
    23fa:	27 c0       	rjmp	.+78     	; 0x244a <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	8e 01       	movw	r16, r28
    23fe:	0d 57       	subi	r16, 0x7D	; 125
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	fe 01       	movw	r30, r28
    2404:	eb 57       	subi	r30, 0x7B	; 123
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	f8 01       	movw	r30, r16
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	de 01       	movw	r26, r28
    2420:	a1 58       	subi	r26, 0x81	; 129
    2422:	bf 4f       	sbci	r27, 0xFF	; 255
    2424:	fe 01       	movw	r30, r28
    2426:	ed 57       	subi	r30, 0x7D	; 125
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	8d 93       	st	X+, r24
    2430:	9c 93       	st	X, r25
    2432:	fe 01       	movw	r30, r28
    2434:	e1 58       	subi	r30, 0x81	; 129
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <main+0x32e>
    2440:	fe 01       	movw	r30, r28
    2442:	e1 58       	subi	r30, 0x81	; 129
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
		_delay_ms(500);

		UART_sendByte(M1_READY);
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
		while(UART_recieveByte() != M2_READY){}
    2450:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    2454:	80 31       	cpi	r24, 0x10	; 16
    2456:	e1 f7       	brne	.-8      	; 0x2450 <main+0x342>
		char what=UART_recieveByte();
    2458:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    245c:	fe 01       	movw	r30, r28
    245e:	e6 55       	subi	r30, 0x56	; 86
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 83       	st	Z, r24
		if(what==1)
    2464:	fe 01       	movw	r30, r28
    2466:	e6 55       	subi	r30, 0x56	; 86
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	09 f0       	breq	.+2      	; 0x2472 <main+0x364>
    2470:	0d c4       	rjmp	.+2074   	; 0x2c8c <main+0xb7e>
		{
			LCD_displayString("Enter  password");
    2472:	8c ea       	ldi	r24, 0xAC	; 172
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    247a:	fe 01       	movw	r30, r28
    247c:	e5 58       	subi	r30, 0x85	; 133
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	aa ef       	ldi	r26, 0xFA	; 250
    2486:	b3 e4       	ldi	r27, 0x43	; 67
    2488:	80 83       	st	Z, r24
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	a2 83       	std	Z+2, r26	; 0x02
    248e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	8e 01       	movw	r16, r28
    2492:	09 58       	subi	r16, 0x89	; 137
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	e5 58       	subi	r30, 0x85	; 133
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	53 e4       	ldi	r21, 0x43	; 67
    24ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 83       	st	Z, r24
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	a2 83       	std	Z+2, r26	; 0x02
    24bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24be:	fe 01       	movw	r30, r28
    24c0:	e9 58       	subi	r30, 0x89	; 137
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	44 f4       	brge	.+16     	; 0x24ec <main+0x3de>
		__ticks = 1;
    24dc:	fe 01       	movw	r30, r28
    24de:	eb 58       	subi	r30, 0x8B	; 139
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	64 c0       	rjmp	.+200    	; 0x25b4 <main+0x4a6>
	else if (__tmp > 65535)
    24ec:	fe 01       	movw	r30, r28
    24ee:	e9 58       	subi	r30, 0x89	; 137
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	0c f0       	brlt	.+2      	; 0x250c <main+0x3fe>
    250a:	43 c0       	rjmp	.+134    	; 0x2592 <main+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	fe 01       	movw	r30, r28
    250e:	e5 58       	subi	r30, 0x85	; 133
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8e 01       	movw	r16, r28
    252c:	0b 58       	subi	r16, 0x8B	; 139
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	1f c0       	rjmp	.+62     	; 0x2582 <main+0x474>
    2544:	fe 01       	movw	r30, r28
    2546:	ed 58       	subi	r30, 0x8D	; 141
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	89 e1       	ldi	r24, 0x19	; 25
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	fe 01       	movw	r30, r28
    2554:	ed 58       	subi	r30, 0x8D	; 141
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <main+0x44e>
    2560:	fe 01       	movw	r30, r28
    2562:	ed 58       	subi	r30, 0x8D	; 141
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	de 01       	movw	r26, r28
    256c:	ab 58       	subi	r26, 0x8B	; 139
    256e:	bf 4f       	sbci	r27, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	eb 58       	subi	r30, 0x8B	; 139
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	9c 93       	st	X, r25
    2580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	fe 01       	movw	r30, r28
    2584:	eb 58       	subi	r30, 0x8B	; 139
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	d1 f6       	brne	.-76     	; 0x2544 <main+0x436>
    2590:	27 c0       	rjmp	.+78     	; 0x25e0 <main+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	8e 01       	movw	r16, r28
    2594:	0b 58       	subi	r16, 0x8B	; 139
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e9 58       	subi	r30, 0x89	; 137
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	de 01       	movw	r26, r28
    25b6:	af 58       	subi	r26, 0x8F	; 143
    25b8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ba:	fe 01       	movw	r30, r28
    25bc:	eb 58       	subi	r30, 0x8B	; 139
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	8d 93       	st	X+, r24
    25c6:	9c 93       	st	X, r25
    25c8:	fe 01       	movw	r30, r28
    25ca:	ef 58       	subi	r30, 0x8F	; 143
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <main+0x4c4>
    25d6:	fe 01       	movw	r30, r28
    25d8:	ef 58       	subi	r30, 0x8F	; 143
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_goToRowColumn(1,0);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
			for(int i=0;i<5; i++)
    25e8:	fe 01       	movw	r30, r28
    25ea:	e8 55       	subi	r30, 0x58	; 88
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	10 82       	st	Z, r1
    25f2:	d9 c0       	rjmp	.+434    	; 0x27a6 <main+0x698>
					{keyy = KeyPad_getPressedKey();
    25f4:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    25f8:	fe 01       	movw	r30, r28
    25fa:	e4 55       	subi	r30, 0x54	; 84
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 83       	st	Z, r24
					k[i]=keyy;
    2600:	fe 01       	movw	r30, r28
    2602:	e8 55       	subi	r30, 0x58	; 88
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	20 81       	ld	r18, Z
    2608:	31 81       	ldd	r19, Z+1	; 0x01
    260a:	ce 01       	movw	r24, r28
    260c:	88 54       	subi	r24, 0x48	; 72
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	dc 01       	movw	r26, r24
    2612:	a2 0f       	add	r26, r18
    2614:	b3 1f       	adc	r27, r19
    2616:	fe 01       	movw	r30, r28
    2618:	e4 55       	subi	r30, 0x54	; 84
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	8c 93       	st	X, r24
							LCD_displayString("*");
    2620:	80 e7       	ldi	r24, 0x70	; 112
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    2628:	fe 01       	movw	r30, r28
    262a:	e3 59       	subi	r30, 0x93	; 147
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	aa ef       	ldi	r26, 0xFA	; 250
    2634:	b3 e4       	ldi	r27, 0x43	; 67
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	8e 01       	movw	r16, r28
    2640:	07 59       	subi	r16, 0x97	; 151
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	e3 59       	subi	r30, 0x93	; 147
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a e7       	ldi	r20, 0x7A	; 122
    2658:	53 e4       	ldi	r21, 0x43	; 67
    265a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	f8 01       	movw	r30, r16
    2664:	80 83       	st	Z, r24
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	a2 83       	std	Z+2, r26	; 0x02
    266a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266c:	fe 01       	movw	r30, r28
    266e:	e7 59       	subi	r30, 0x97	; 151
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	44 f4       	brge	.+16     	; 0x269a <main+0x58c>
		__ticks = 1;
    268a:	fe 01       	movw	r30, r28
    268c:	e9 59       	subi	r30, 0x99	; 153
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	64 c0       	rjmp	.+200    	; 0x2762 <main+0x654>
	else if (__tmp > 65535)
    269a:	fe 01       	movw	r30, r28
    269c:	e7 59       	subi	r30, 0x97	; 151
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <main+0x5ac>
    26b8:	43 c0       	rjmp	.+134    	; 0x2740 <main+0x632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	fe 01       	movw	r30, r28
    26bc:	e3 59       	subi	r30, 0x93	; 147
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8e 01       	movw	r16, r28
    26da:	09 59       	subi	r16, 0x99	; 153
    26dc:	1f 4f       	sbci	r17, 0xFF	; 255
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	1f c0       	rjmp	.+62     	; 0x2730 <main+0x622>
    26f2:	fe 01       	movw	r30, r28
    26f4:	eb 59       	subi	r30, 0x9B	; 155
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	89 e1       	ldi	r24, 0x19	; 25
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	fe 01       	movw	r30, r28
    2702:	eb 59       	subi	r30, 0x9B	; 155
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <main+0x5fc>
    270e:	fe 01       	movw	r30, r28
    2710:	eb 59       	subi	r30, 0x9B	; 155
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	de 01       	movw	r26, r28
    271a:	a9 59       	subi	r26, 0x99	; 153
    271c:	bf 4f       	sbci	r27, 0xFF	; 255
    271e:	fe 01       	movw	r30, r28
    2720:	e9 59       	subi	r30, 0x99	; 153
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	9c 93       	st	X, r25
    272e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	fe 01       	movw	r30, r28
    2732:	e9 59       	subi	r30, 0x99	; 153
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	d1 f6       	brne	.-76     	; 0x26f2 <main+0x5e4>
    273e:	27 c0       	rjmp	.+78     	; 0x278e <main+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	8e 01       	movw	r16, r28
    2742:	09 59       	subi	r16, 0x99	; 153
    2744:	1f 4f       	sbci	r17, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e7 59       	subi	r30, 0x97	; 151
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	f8 01       	movw	r30, r16
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	de 01       	movw	r26, r28
    2764:	ad 59       	subi	r26, 0x9D	; 157
    2766:	bf 4f       	sbci	r27, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	e9 59       	subi	r30, 0x99	; 153
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	8d 93       	st	X+, r24
    2774:	9c 93       	st	X, r25
    2776:	fe 01       	movw	r30, r28
    2778:	ed 59       	subi	r30, 0x9D	; 157
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	80 81       	ld	r24, Z
    277e:	91 81       	ldd	r25, Z+1	; 0x01
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <main+0x672>
    2784:	fe 01       	movw	r30, r28
    2786:	ed 59       	subi	r30, 0x9D	; 157
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
		if(what==1)
		{
			LCD_displayString("Enter  password");
			_delay_ms(500);
			LCD_goToRowColumn(1,0);
			for(int i=0;i<5; i++)
    278e:	de 01       	movw	r26, r28
    2790:	a8 55       	subi	r26, 0x58	; 88
    2792:	bf 4f       	sbci	r27, 0xFF	; 255
    2794:	fe 01       	movw	r30, r28
    2796:	e8 55       	subi	r30, 0x58	; 88
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	91 81       	ldd	r25, Z+1	; 0x01
    279e:	01 96       	adiw	r24, 0x01	; 1
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	9c 93       	st	X, r25
    27a4:	8e 93       	st	-X, r24
    27a6:	fe 01       	movw	r30, r28
    27a8:	e8 55       	subi	r30, 0x58	; 88
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	85 30       	cpi	r24, 0x05	; 5
    27b2:	91 05       	cpc	r25, r1
    27b4:	0c f4       	brge	.+2      	; 0x27b8 <main+0x6aa>
    27b6:	1e cf       	rjmp	.-452    	; 0x25f4 <main+0x4e6>
					{keyy = KeyPad_getPressedKey();
					k[i]=keyy;
							LCD_displayString("*");
									_delay_ms(500);
					}
			for(int i=0;i<5; i++)
    27b8:	fe 01       	movw	r30, r28
    27ba:	ea 55       	subi	r30, 0x5A	; 90
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	11 82       	std	Z+1, r1	; 0x01
    27c0:	10 82       	st	Z, r1
    27c2:	d5 c0       	rjmp	.+426    	; 0x296e <main+0x860>
			{UART_sendByte(M1_READY);
    27c4:	80 e2       	ldi	r24, 0x20	; 32
    27c6:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
			while(UART_recieveByte() != M2_READY){}
    27ca:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    27ce:	80 31       	cpi	r24, 0x10	; 16
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <main+0x6bc>

			rec[i]	=UART_recieveByte();
    27d2:	fe 01       	movw	r30, r28
    27d4:	ea 55       	subi	r30, 0x5A	; 90
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	00 81       	ld	r16, Z
    27da:	11 81       	ldd	r17, Z+1	; 0x01
    27dc:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    27e0:	28 2f       	mov	r18, r24
    27e2:	ce 01       	movw	r24, r28
    27e4:	83 54       	subi	r24, 0x43	; 67
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	fc 01       	movw	r30, r24
    27ea:	e0 0f       	add	r30, r16
    27ec:	f1 1f       	adc	r31, r17
    27ee:	20 83       	st	Z, r18
    27f0:	fe 01       	movw	r30, r28
    27f2:	e1 5a       	subi	r30, 0xA1	; 161
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a0 e2       	ldi	r26, 0x20	; 32
    27fc:	b1 e4       	ldi	r27, 0x41	; 65
    27fe:	80 83       	st	Z, r24
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	a2 83       	std	Z+2, r26	; 0x02
    2804:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2806:	8e 01       	movw	r16, r28
    2808:	05 5a       	subi	r16, 0xA5	; 165
    280a:	1f 4f       	sbci	r17, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e1 5a       	subi	r30, 0xA1	; 161
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	53 e4       	ldi	r21, 0x43	; 67
    2822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	f8 01       	movw	r30, r16
    282c:	80 83       	st	Z, r24
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	a2 83       	std	Z+2, r26	; 0x02
    2832:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2834:	fe 01       	movw	r30, r28
    2836:	e5 5a       	subi	r30, 0xA5	; 165
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e8       	ldi	r20, 0x80	; 128
    2848:	5f e3       	ldi	r21, 0x3F	; 63
    284a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    284e:	88 23       	and	r24, r24
    2850:	44 f4       	brge	.+16     	; 0x2862 <main+0x754>
		__ticks = 1;
    2852:	fe 01       	movw	r30, r28
    2854:	e7 5a       	subi	r30, 0xA7	; 167
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	64 c0       	rjmp	.+200    	; 0x292a <main+0x81c>
	else if (__tmp > 65535)
    2862:	fe 01       	movw	r30, r28
    2864:	e5 5a       	subi	r30, 0xA5	; 165
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	0c f0       	brlt	.+2      	; 0x2882 <main+0x774>
    2880:	43 c0       	rjmp	.+134    	; 0x2908 <main+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	fe 01       	movw	r30, r28
    2884:	e1 5a       	subi	r30, 0xA1	; 161
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8e 01       	movw	r16, r28
    28a2:	07 5a       	subi	r16, 0xA7	; 167
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
    28b8:	1f c0       	rjmp	.+62     	; 0x28f8 <main+0x7ea>
    28ba:	fe 01       	movw	r30, r28
    28bc:	e9 5a       	subi	r30, 0xA9	; 169
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	89 e1       	ldi	r24, 0x19	; 25
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	fe 01       	movw	r30, r28
    28ca:	e9 5a       	subi	r30, 0xA9	; 169
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <main+0x7c4>
    28d6:	fe 01       	movw	r30, r28
    28d8:	e9 5a       	subi	r30, 0xA9	; 169
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e0:	de 01       	movw	r26, r28
    28e2:	a7 5a       	subi	r26, 0xA7	; 167
    28e4:	bf 4f       	sbci	r27, 0xFF	; 255
    28e6:	fe 01       	movw	r30, r28
    28e8:	e7 5a       	subi	r30, 0xA7	; 167
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	11 96       	adiw	r26, 0x01	; 1
    28f4:	9c 93       	st	X, r25
    28f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f8:	fe 01       	movw	r30, r28
    28fa:	e7 5a       	subi	r30, 0xA7	; 167
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	80 81       	ld	r24, Z
    2900:	91 81       	ldd	r25, Z+1	; 0x01
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	d1 f6       	brne	.-76     	; 0x28ba <main+0x7ac>
    2906:	27 c0       	rjmp	.+78     	; 0x2956 <main+0x848>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	8e 01       	movw	r16, r28
    290a:	07 5a       	subi	r16, 0xA7	; 167
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	fe 01       	movw	r30, r28
    2910:	e5 5a       	subi	r30, 0xA5	; 165
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	f8 01       	movw	r30, r16
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	de 01       	movw	r26, r28
    292c:	ab 5a       	subi	r26, 0xAB	; 171
    292e:	bf 4f       	sbci	r27, 0xFF	; 255
    2930:	fe 01       	movw	r30, r28
    2932:	e7 5a       	subi	r30, 0xA7	; 167
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	8d 93       	st	X+, r24
    293c:	9c 93       	st	X, r25
    293e:	fe 01       	movw	r30, r28
    2940:	eb 5a       	subi	r30, 0xAB	; 171
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <main+0x83a>
    294c:	fe 01       	movw	r30, r28
    294e:	eb 5a       	subi	r30, 0xAB	; 171
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	80 83       	st	Z, r24
					{keyy = KeyPad_getPressedKey();
					k[i]=keyy;
							LCD_displayString("*");
									_delay_ms(500);
					}
			for(int i=0;i<5; i++)
    2956:	de 01       	movw	r26, r28
    2958:	aa 55       	subi	r26, 0x5A	; 90
    295a:	bf 4f       	sbci	r27, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	ea 55       	subi	r30, 0x5A	; 90
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	11 96       	adiw	r26, 0x01	; 1
    296a:	9c 93       	st	X, r25
    296c:	8e 93       	st	-X, r24
    296e:	fe 01       	movw	r30, r28
    2970:	ea 55       	subi	r30, 0x5A	; 90
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	85 30       	cpi	r24, 0x05	; 5
    297a:	91 05       	cpc	r25, r1
    297c:	0c f4       	brge	.+2      	; 0x2980 <main+0x872>
    297e:	22 cf       	rjmp	.-444    	; 0x27c4 <main+0x6b6>
			rec[i]	=UART_recieveByte();
			_delay_ms(10);
			//LCD_intgerToString(rec[i]);

						}
			for(int i=0;i<5; i++)
    2980:	fe 01       	movw	r30, r28
    2982:	ec 55       	subi	r30, 0x5C	; 92
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	11 82       	std	Z+1, r1	; 0x01
    2988:	10 82       	st	Z, r1
    298a:	76 c1       	rjmp	.+748    	; 0x2c78 <main+0xb6a>
			{
				if(k[i]==rec[i])
    298c:	fe 01       	movw	r30, r28
    298e:	ec 55       	subi	r30, 0x5C	; 92
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	20 81       	ld	r18, Z
    2994:	31 81       	ldd	r19, Z+1	; 0x01
    2996:	ce 01       	movw	r24, r28
    2998:	88 54       	subi	r24, 0x48	; 72
    299a:	9f 4f       	sbci	r25, 0xFF	; 255
    299c:	fc 01       	movw	r30, r24
    299e:	e2 0f       	add	r30, r18
    29a0:	f3 1f       	adc	r31, r19
    29a2:	40 81       	ld	r20, Z
    29a4:	fe 01       	movw	r30, r28
    29a6:	ec 55       	subi	r30, 0x5C	; 92
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	20 81       	ld	r18, Z
    29ac:	31 81       	ldd	r19, Z+1	; 0x01
    29ae:	ce 01       	movw	r24, r28
    29b0:	83 54       	subi	r24, 0x43	; 67
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	fc 01       	movw	r30, r24
    29b6:	e2 0f       	add	r30, r18
    29b8:	f3 1f       	adc	r31, r19
    29ba:	80 81       	ld	r24, Z
    29bc:	48 17       	cp	r20, r24
    29be:	09 f0       	breq	.+2      	; 0x29c2 <main+0x8b4>
    29c0:	bc c0       	rjmp	.+376    	; 0x2b3a <main+0xa2c>
				{
					LCD_displayStringRowColumn(0,0,"correct  password");
    29c2:	2c eb       	ldi	r18, 0xBC	; 188
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	60 e0       	ldi	r22, 0x00	; 0
    29ca:	a9 01       	movw	r20, r18
    29cc:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
    29d0:	fe 01       	movw	r30, r28
    29d2:	ef 5a       	subi	r30, 0xAF	; 175
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	aa ef       	ldi	r26, 0xFA	; 250
    29dc:	b3 e4       	ldi	r27, 0x43	; 67
    29de:	80 83       	st	Z, r24
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	a2 83       	std	Z+2, r26	; 0x02
    29e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e6:	8e 01       	movw	r16, r28
    29e8:	03 5b       	subi	r16, 0xB3	; 179
    29ea:	1f 4f       	sbci	r17, 0xFF	; 255
    29ec:	fe 01       	movw	r30, r28
    29ee:	ef 5a       	subi	r30, 0xAF	; 175
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a e7       	ldi	r20, 0x7A	; 122
    2a00:	53 e4       	ldi	r21, 0x43	; 67
    2a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 83       	st	Z, r24
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a14:	fe 01       	movw	r30, r28
    2a16:	e3 5b       	subi	r30, 0xB3	; 179
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e8       	ldi	r20, 0x80	; 128
    2a28:	5f e3       	ldi	r21, 0x3F	; 63
    2a2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a2e:	88 23       	and	r24, r24
    2a30:	44 f4       	brge	.+16     	; 0x2a42 <main+0x934>
		__ticks = 1;
    2a32:	fe 01       	movw	r30, r28
    2a34:	e5 5b       	subi	r30, 0xB5	; 181
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
    2a40:	64 c0       	rjmp	.+200    	; 0x2b0a <main+0x9fc>
	else if (__tmp > 65535)
    2a42:	fe 01       	movw	r30, r28
    2a44:	e3 5b       	subi	r30, 0xB3	; 179
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	3f ef       	ldi	r19, 0xFF	; 255
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	57 e4       	ldi	r21, 0x47	; 71
    2a58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	0c f0       	brlt	.+2      	; 0x2a62 <main+0x954>
    2a60:	43 c0       	rjmp	.+134    	; 0x2ae8 <main+0x9da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	fe 01       	movw	r30, r28
    2a64:	ef 5a       	subi	r30, 0xAF	; 175
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8e 01       	movw	r16, r28
    2a82:	05 5b       	subi	r16, 0xB5	; 181
    2a84:	1f 4f       	sbci	r17, 0xFF	; 255
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	f8 01       	movw	r30, r16
    2a94:	91 83       	std	Z+1, r25	; 0x01
    2a96:	80 83       	st	Z, r24
    2a98:	1f c0       	rjmp	.+62     	; 0x2ad8 <main+0x9ca>
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e7 5b       	subi	r30, 0xB7	; 183
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	89 e1       	ldi	r24, 0x19	; 25
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e7 5b       	subi	r30, 0xB7	; 183
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <main+0x9a4>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e7 5b       	subi	r30, 0xB7	; 183
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	de 01       	movw	r26, r28
    2ac2:	a5 5b       	subi	r26, 0xB5	; 181
    2ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e5 5b       	subi	r30, 0xB5	; 181
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e5 5b       	subi	r30, 0xB5	; 181
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	d1 f6       	brne	.-76     	; 0x2a9a <main+0x98c>
    2ae6:	bc c0       	rjmp	.+376    	; 0x2c60 <main+0xb52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	8e 01       	movw	r16, r28
    2aea:	05 5b       	subi	r16, 0xB5	; 181
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	fe 01       	movw	r30, r28
    2af0:	e3 5b       	subi	r30, 0xB3	; 179
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	de 01       	movw	r26, r28
    2b0c:	a9 5b       	subi	r26, 0xB9	; 185
    2b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e5 5b       	subi	r30, 0xB5	; 181
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	11 96       	adiw	r26, 0x01	; 1
    2b1c:	9c 93       	st	X, r25
    2b1e:	8e 93       	st	-X, r24
    2b20:	fe 01       	movw	r30, r28
    2b22:	e9 5b       	subi	r30, 0xB9	; 185
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <main+0xa1c>
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e9 5b       	subi	r30, 0xB9	; 185
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	91 83       	std	Z+1, r25	; 0x01
    2b36:	80 83       	st	Z, r24
    2b38:	93 c0       	rjmp	.+294    	; 0x2c60 <main+0xb52>


				}
				else
				{
					i=5;
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ec 55       	subi	r30, 0x5C	; 92
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	85 e0       	ldi	r24, 0x05	; 5
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
					LCD_displayStringRowColumn(0,0,"incorrect  password");
    2b48:	2e ec       	ldi	r18, 0xCE	; 206
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	a9 01       	movw	r20, r18
    2b52:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
    2b56:	fe 01       	movw	r30, r28
    2b58:	ed 5b       	subi	r30, 0xBD	; 189
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	aa ef       	ldi	r26, 0xFA	; 250
    2b62:	b3 e4       	ldi	r27, 0x43	; 67
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	a2 83       	std	Z+2, r26	; 0x02
    2b6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	8e 01       	movw	r16, r28
    2b6e:	01 5c       	subi	r16, 0xC1	; 193
    2b70:	1f 4f       	sbci	r17, 0xFF	; 255
    2b72:	fe 01       	movw	r30, r28
    2b74:	ed 5b       	subi	r30, 0xBD	; 189
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	60 81       	ld	r22, Z
    2b7a:	71 81       	ldd	r23, Z+1	; 0x01
    2b7c:	82 81       	ldd	r24, Z+2	; 0x02
    2b7e:	93 81       	ldd	r25, Z+3	; 0x03
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	53 e4       	ldi	r21, 0x43	; 67
    2b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	80 83       	st	Z, r24
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	a2 83       	std	Z+2, r26	; 0x02
    2b98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ff 96       	adiw	r30, 0x3f	; 63
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <main+0xab2>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9e af       	std	Y+62, r25	; 0x3e
    2bbc:	8d af       	std	Y+61, r24	; 0x3d
    2bbe:	46 c0       	rjmp	.+140    	; 0x2c4c <main+0xb3e>
	else if (__tmp > 65535)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	ff 96       	adiw	r30, 0x3f	; 63
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	64 f5       	brge	.+88     	; 0x2c34 <main+0xb26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ed 5b       	subi	r30, 0xBD	; 189
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e af       	std	Y+62, r25	; 0x3e
    2c08:	8d af       	std	Y+61, r24	; 0x3d
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <main+0xb1c>
    2c0c:	89 e1       	ldi	r24, 0x19	; 25
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9c af       	std	Y+60, r25	; 0x3c
    2c12:	8b af       	std	Y+59, r24	; 0x3b
    2c14:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c16:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <main+0xb0a>
    2c1c:	9c af       	std	Y+60, r25	; 0x3c
    2c1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c22:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9e af       	std	Y+62, r25	; 0x3e
    2c28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <main+0xafe>
    2c32:	16 c0       	rjmp	.+44     	; 0x2c60 <main+0xb52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	fe 01       	movw	r30, r28
    2c36:	ff 96       	adiw	r30, 0x3f	; 63
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e af       	std	Y+62, r25	; 0x3e
    2c4a:	8d af       	std	Y+61, r24	; 0x3d
    2c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c50:	9a af       	std	Y+58, r25	; 0x3a
    2c52:	89 af       	std	Y+57, r24	; 0x39
    2c54:	89 ad       	ldd	r24, Y+57	; 0x39
    2c56:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <main+0xb4a>
    2c5c:	9a af       	std	Y+58, r25	; 0x3a
    2c5e:	89 af       	std	Y+57, r24	; 0x39
			rec[i]	=UART_recieveByte();
			_delay_ms(10);
			//LCD_intgerToString(rec[i]);

						}
			for(int i=0;i<5; i++)
    2c60:	de 01       	movw	r26, r28
    2c62:	ac 55       	subi	r26, 0x5C	; 92
    2c64:	bf 4f       	sbci	r27, 0xFF	; 255
    2c66:	fe 01       	movw	r30, r28
    2c68:	ec 55       	subi	r30, 0x5C	; 92
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	11 96       	adiw	r26, 0x01	; 1
    2c74:	9c 93       	st	X, r25
    2c76:	8e 93       	st	-X, r24
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ec 55       	subi	r30, 0x5C	; 92
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	85 30       	cpi	r24, 0x05	; 5
    2c84:	91 05       	cpc	r25, r1
    2c86:	0c f4       	brge	.+2      	; 0x2c8a <main+0xb7c>
    2c88:	81 ce       	rjmp	.-766    	; 0x298c <main+0x87e>
    2c8a:	52 ca       	rjmp	.-2908   	; 0x2130 <main+0x22>
					_delay_ms(500);

				}
			}
		}
		else{LCD_displayString("Enter new passw");
    2c8c:	82 ee       	ldi	r24, 0xE2	; 226
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_displayString>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	aa ef       	ldi	r26, 0xFA	; 250
    2c9a:	b3 e4       	ldi	r27, 0x43	; 67
    2c9c:	8d ab       	std	Y+53, r24	; 0x35
    2c9e:	9e ab       	std	Y+54, r25	; 0x36
    2ca0:	af ab       	std	Y+55, r26	; 0x37
    2ca2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca8:	8f a9       	ldd	r24, Y+55	; 0x37
    2caa:	98 ad       	ldd	r25, Y+56	; 0x38
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a e7       	ldi	r20, 0x7A	; 122
    2cb2:	53 e4       	ldi	r21, 0x43	; 67
    2cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	89 ab       	std	Y+49, r24	; 0x31
    2cbe:	9a ab       	std	Y+50, r25	; 0x32
    2cc0:	ab ab       	std	Y+51, r26	; 0x33
    2cc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cca:	9c a9       	ldd	r25, Y+52	; 0x34
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	2c f4       	brge	.+10     	; 0x2ce6 <main+0xbd8>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	98 ab       	std	Y+48, r25	; 0x30
    2ce2:	8f a7       	std	Y+47, r24	; 0x2f
    2ce4:	3f c0       	rjmp	.+126    	; 0x2d64 <main+0xc56>
	else if (__tmp > 65535)
    2ce6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ce8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cea:	8b a9       	ldd	r24, Y+51	; 0x33
    2cec:	9c a9       	ldd	r25, Y+52	; 0x34
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	3f ef       	ldi	r19, 0xFF	; 255
    2cf2:	4f e7       	ldi	r20, 0x7F	; 127
    2cf4:	57 e4       	ldi	r21, 0x47	; 71
    2cf6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cfa:	18 16       	cp	r1, r24
    2cfc:	4c f5       	brge	.+82     	; 0x2d50 <main+0xc42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfe:	6d a9       	ldd	r22, Y+53	; 0x35
    2d00:	7e a9       	ldd	r23, Y+54	; 0x36
    2d02:	8f a9       	ldd	r24, Y+55	; 0x37
    2d04:	98 ad       	ldd	r25, Y+56	; 0x38
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e2       	ldi	r20, 0x20	; 32
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	98 ab       	std	Y+48, r25	; 0x30
    2d24:	8f a7       	std	Y+47, r24	; 0x2f
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <main+0xc38>
    2d28:	89 e1       	ldi	r24, 0x19	; 25
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	9e a7       	std	Y+46, r25	; 0x2e
    2d2e:	8d a7       	std	Y+45, r24	; 0x2d
    2d30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d32:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <main+0xc26>
    2d38:	9e a7       	std	Y+46, r25	; 0x2e
    2d3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	98 ab       	std	Y+48, r25	; 0x30
    2d44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d48:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	69 f7       	brne	.-38     	; 0x2d28 <main+0xc1a>
    2d4e:	14 c0       	rjmp	.+40     	; 0x2d78 <main+0xc6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d50:	69 a9       	ldd	r22, Y+49	; 0x31
    2d52:	7a a9       	ldd	r23, Y+50	; 0x32
    2d54:	8b a9       	ldd	r24, Y+51	; 0x33
    2d56:	9c a9       	ldd	r25, Y+52	; 0x34
    2d58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	98 ab       	std	Y+48, r25	; 0x30
    2d62:	8f a7       	std	Y+47, r24	; 0x2f
    2d64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d66:	98 a9       	ldd	r25, Y+48	; 0x30
    2d68:	9c a7       	std	Y+44, r25	; 0x2c
    2d6a:	8b a7       	std	Y+43, r24	; 0x2b
    2d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <main+0xc62>
    2d74:	9c a7       	std	Y+44, r25	; 0x2c
    2d76:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
			LCD_goToRowColumn(1,0);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
				for(int i=0;i<5; i++)
    2d80:	fe 01       	movw	r30, r28
    2d82:	ef 55       	subi	r30, 0x5F	; 95
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	11 82       	std	Z+1, r1	; 0x01
    2d88:	10 82       	st	Z, r1
    2d8a:	a4 c0       	rjmp	.+328    	; 0x2ed4 <main+0xdc6>
				{key = KeyPad_getPressedKey();
    2d8c:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    2d90:	fe 01       	movw	r30, r28
    2d92:	e3 55       	subi	r30, 0x53	; 83
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 83       	st	Z, r24
							LCD_displayString("*");
							UART_sendByte(key);
						}
						*/

				s[i]=key;
    2d98:	fe 01       	movw	r30, r28
    2d9a:	ef 55       	subi	r30, 0x5F	; 95
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	20 81       	ld	r18, Z
    2da0:	31 81       	ldd	r19, Z+1	; 0x01
    2da2:	ce 01       	movw	r24, r28
    2da4:	82 55       	subi	r24, 0x52	; 82
    2da6:	9f 4f       	sbci	r25, 0xFF	; 255
    2da8:	dc 01       	movw	r26, r24
    2daa:	a2 0f       	add	r26, r18
    2dac:	b3 1f       	adc	r27, r19
    2dae:	fe 01       	movw	r30, r28
    2db0:	e3 55       	subi	r30, 0x53	; 83
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	8c 93       	st	X, r24

				LCD_intgerToString(s[i]);
    2db8:	fe 01       	movw	r30, r28
    2dba:	ef 55       	subi	r30, 0x5F	; 95
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	20 81       	ld	r18, Z
    2dc0:	31 81       	ldd	r19, Z+1	; 0x01
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	82 55       	subi	r24, 0x52	; 82
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e2 0f       	add	r30, r18
    2dcc:	f3 1f       	adc	r31, r19
    2dce:	80 81       	ld	r24, Z
    2dd0:	88 2f       	mov	r24, r24
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	aa ef       	ldi	r26, 0xFA	; 250
    2dde:	b3 e4       	ldi	r27, 0x43	; 67
    2de0:	8f a3       	std	Y+39, r24	; 0x27
    2de2:	98 a7       	std	Y+40, r25	; 0x28
    2de4:	a9 a7       	std	Y+41, r26	; 0x29
    2de6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dea:	78 a5       	ldd	r23, Y+40	; 0x28
    2dec:	89 a5       	ldd	r24, Y+41	; 0x29
    2dee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a e7       	ldi	r20, 0x7A	; 122
    2df6:	53 e4       	ldi	r21, 0x43	; 67
    2df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8b a3       	std	Y+35, r24	; 0x23
    2e02:	9c a3       	std	Y+36, r25	; 0x24
    2e04:	ad a3       	std	Y+37, r26	; 0x25
    2e06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e08:	6b a1       	ldd	r22, Y+35	; 0x23
    2e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <main+0xd1c>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9a a3       	std	Y+34, r25	; 0x22
    2e26:	89 a3       	std	Y+33, r24	; 0x21
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <main+0xd9a>
	else if (__tmp > 65535)
    2e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e30:	9e a1       	ldd	r25, Y+38	; 0x26
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <main+0xd86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6f a1       	ldd	r22, Y+39	; 0x27
    2e44:	78 a5       	ldd	r23, Y+40	; 0x28
    2e46:	89 a5       	ldd	r24, Y+41	; 0x29
    2e48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9a a3       	std	Y+34, r25	; 0x22
    2e68:	89 a3       	std	Y+33, r24	; 0x21
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <main+0xd7c>
    2e6c:	89 e1       	ldi	r24, 0x19	; 25
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	98 a3       	std	Y+32, r25	; 0x20
    2e72:	8f 8f       	std	Y+31, r24	; 0x1f
    2e74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e76:	98 a1       	ldd	r25, Y+32	; 0x20
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <main+0xd6a>
    2e7c:	98 a3       	std	Y+32, r25	; 0x20
    2e7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	89 a1       	ldd	r24, Y+33	; 0x21
    2e82:	9a a1       	ldd	r25, Y+34	; 0x22
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9a a3       	std	Y+34, r25	; 0x22
    2e88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <main+0xd5e>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <main+0xdae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	6b a1       	ldd	r22, Y+35	; 0x23
    2e96:	7c a1       	ldd	r23, Y+36	; 0x24
    2e98:	8d a1       	ldd	r24, Y+37	; 0x25
    2e9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9a a3       	std	Y+34, r25	; 0x22
    2ea6:	89 a3       	std	Y+33, r24	; 0x21
    2ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2eac:	9e 8f       	std	Y+30, r25	; 0x1e
    2eae:	8d 8f       	std	Y+29, r24	; 0x1d
    2eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <main+0xda6>
    2eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eba:	8d 8f       	std	Y+29, r24	; 0x1d
			}
		}
		else{LCD_displayString("Enter new passw");
		_delay_ms(500);
			LCD_goToRowColumn(1,0);
				for(int i=0;i<5; i++)
    2ebc:	de 01       	movw	r26, r28
    2ebe:	af 55       	subi	r26, 0x5F	; 95
    2ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ef 55       	subi	r30, 0x5F	; 95
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	11 96       	adiw	r26, 0x01	; 1
    2ed0:	9c 93       	st	X, r25
    2ed2:	8e 93       	st	-X, r24
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ef 55       	subi	r30, 0x5F	; 95
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	85 30       	cpi	r24, 0x05	; 5
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	0c f4       	brge	.+2      	; 0x2ee6 <main+0xdd8>
    2ee4:	53 cf       	rjmp	.-346    	; 0x2d8c <main+0xc7e>
				LCD_intgerToString(s[i]);
						_delay_ms(500);
						/* Press time */
						//printf("String is %s \n" , key);
			}
				LCD_displayStringRowColumn(0,0,"check your password");
    2ee6:	22 ef       	ldi	r18, 0xF2	; 242
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	a9 01       	movw	r20, r18
    2ef0:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
				LCD_goToRowColumn(1,0);
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	60 e0       	ldi	r22, 0x00	; 0
    2ef8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <LCD_goToRowColumn>
				LCD_displayStringRowColumn(1,0,"     ");
    2efc:	26 e0       	ldi	r18, 0x06	; 6
    2efe:	31 e0       	ldi	r19, 0x01	; 1
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	a9 01       	movw	r20, r18
    2f06:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
				for(int i=0;i<5; i++)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e1 56       	subi	r30, 0x61	; 97
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	11 82       	std	Z+1, r1	; 0x01
    2f12:	10 82       	st	Z, r1
    2f14:	a4 c0       	rjmp	.+328    	; 0x305e <main+0xf50>
						{key = KeyPad_getPressedKey();
    2f16:	0e 94 c2 06 	call	0xd84	; 0xd84 <KeyPad_getPressedKey>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e3 55       	subi	r30, 0x53	; 83
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	80 83       	st	Z, r24
						check[i]=key;
    2f22:	fe 01       	movw	r30, r28
    2f24:	e1 56       	subi	r30, 0x61	; 97
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	20 81       	ld	r18, Z
    2f2a:	31 81       	ldd	r19, Z+1	; 0x01
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	8d 54       	subi	r24, 0x4D	; 77
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	dc 01       	movw	r26, r24
    2f34:	a2 0f       	add	r26, r18
    2f36:	b3 1f       	adc	r27, r19
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e3 55       	subi	r30, 0x53	; 83
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 81       	ld	r24, Z
    2f40:	8c 93       	st	X, r24
						LCD_intgerToString(check[i]);
    2f42:	fe 01       	movw	r30, r28
    2f44:	e1 56       	subi	r30, 0x61	; 97
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	20 81       	ld	r18, Z
    2f4a:	31 81       	ldd	r19, Z+1	; 0x01
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	8d 54       	subi	r24, 0x4D	; 77
    2f50:	9f 4f       	sbci	r25, 0xFF	; 255
    2f52:	fc 01       	movw	r30, r24
    2f54:	e2 0f       	add	r30, r18
    2f56:	f3 1f       	adc	r31, r19
    2f58:	80 81       	ld	r24, Z
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <LCD_intgerToString>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	aa ef       	ldi	r26, 0xFA	; 250
    2f68:	b3 e4       	ldi	r27, 0x43	; 67
    2f6a:	89 8f       	std	Y+25, r24	; 0x19
    2f6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	69 8d       	ldd	r22, Y+25	; 0x19
    2f74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a e7       	ldi	r20, 0x7A	; 122
    2f80:	53 e4       	ldi	r21, 0x43	; 67
    2f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8d 8b       	std	Y+21, r24	; 0x15
    2f8c:	9e 8b       	std	Y+22, r25	; 0x16
    2f8e:	af 8b       	std	Y+23, r26	; 0x17
    2f90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <main+0xea6>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <main+0xf24>
	else if (__tmp > 65535)
    2fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fba:	98 8d       	ldd	r25, Y+24	; 0x18
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <main+0xf10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9c 8b       	std	Y+20, r25	; 0x14
    2ff2:	8b 8b       	std	Y+19, r24	; 0x13
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <main+0xf06>
    2ff6:	89 e1       	ldi	r24, 0x19	; 25
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	9a 8b       	std	Y+18, r25	; 0x12
    2ffc:	89 8b       	std	Y+17, r24	; 0x11
    2ffe:	89 89       	ldd	r24, Y+17	; 0x11
    3000:	9a 89       	ldd	r25, Y+18	; 0x12
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <main+0xef4>
    3006:	9a 8b       	std	Y+18, r25	; 0x12
    3008:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8b 89       	ldd	r24, Y+19	; 0x13
    300c:	9c 89       	ldd	r25, Y+20	; 0x14
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8b 89       	ldd	r24, Y+19	; 0x13
    3016:	9c 89       	ldd	r25, Y+20	; 0x14
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <main+0xee8>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <main+0xf38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6d 89       	ldd	r22, Y+21	; 0x15
    3020:	7e 89       	ldd	r23, Y+22	; 0x16
    3022:	8f 89       	ldd	r24, Y+23	; 0x17
    3024:	98 8d       	ldd	r25, Y+24	; 0x18
    3026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	8b 89       	ldd	r24, Y+19	; 0x13
    3034:	9c 89       	ldd	r25, Y+20	; 0x14
    3036:	98 8b       	std	Y+16, r25	; 0x10
    3038:	8f 87       	std	Y+15, r24	; 0x0f
    303a:	8f 85       	ldd	r24, Y+15	; 0x0f
    303c:	98 89       	ldd	r25, Y+16	; 0x10
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <main+0xf30>
    3042:	98 8b       	std	Y+16, r25	; 0x10
    3044:	8f 87       	std	Y+15, r24	; 0x0f
						//printf("String is %s \n" , key);
			}
				LCD_displayStringRowColumn(0,0,"check your password");
				LCD_goToRowColumn(1,0);
				LCD_displayStringRowColumn(1,0,"     ");
				for(int i=0;i<5; i++)
    3046:	de 01       	movw	r26, r28
    3048:	a1 56       	subi	r26, 0x61	; 97
    304a:	bf 4f       	sbci	r27, 0xFF	; 255
    304c:	fe 01       	movw	r30, r28
    304e:	e1 56       	subi	r30, 0x61	; 97
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	11 96       	adiw	r26, 0x01	; 1
    305a:	9c 93       	st	X, r25
    305c:	8e 93       	st	-X, r24
    305e:	fe 01       	movw	r30, r28
    3060:	e1 56       	subi	r30, 0x61	; 97
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	85 30       	cpi	r24, 0x05	; 5
    306a:	91 05       	cpc	r25, r1
    306c:	0c f4       	brge	.+2      	; 0x3070 <main+0xf62>
    306e:	53 cf       	rjmp	.-346    	; 0x2f16 <main+0xe08>
						{key = KeyPad_getPressedKey();
						check[i]=key;
						LCD_intgerToString(check[i]);
						_delay_ms(500);
						}
				bool ch = TRUE;
    3070:	fe 01       	movw	r30, r28
    3072:	ed 55       	subi	r30, 0x5D	; 93
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	80 83       	st	Z, r24
				for(int i=0;i<5; i++)
    307a:	fe 01       	movw	r30, r28
    307c:	e3 56       	subi	r30, 0x63	; 99
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	11 82       	std	Z+1, r1	; 0x01
    3082:	10 82       	st	Z, r1
    3084:	2a c0       	rjmp	.+84     	; 0x30da <main+0xfcc>
				{
					if(s[i]!=check[i])
    3086:	fe 01       	movw	r30, r28
    3088:	e3 56       	subi	r30, 0x63	; 99
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	20 81       	ld	r18, Z
    308e:	31 81       	ldd	r19, Z+1	; 0x01
    3090:	ce 01       	movw	r24, r28
    3092:	82 55       	subi	r24, 0x52	; 82
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	fc 01       	movw	r30, r24
    3098:	e2 0f       	add	r30, r18
    309a:	f3 1f       	adc	r31, r19
    309c:	40 81       	ld	r20, Z
    309e:	fe 01       	movw	r30, r28
    30a0:	e3 56       	subi	r30, 0x63	; 99
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	20 81       	ld	r18, Z
    30a6:	31 81       	ldd	r19, Z+1	; 0x01
    30a8:	ce 01       	movw	r24, r28
    30aa:	8d 54       	subi	r24, 0x4D	; 77
    30ac:	9f 4f       	sbci	r25, 0xFF	; 255
    30ae:	fc 01       	movw	r30, r24
    30b0:	e2 0f       	add	r30, r18
    30b2:	f3 1f       	adc	r31, r19
    30b4:	80 81       	ld	r24, Z
    30b6:	48 17       	cp	r20, r24
    30b8:	21 f0       	breq	.+8      	; 0x30c2 <main+0xfb4>
					{
						ch = FALSE;
    30ba:	fe 01       	movw	r30, r28
    30bc:	ed 55       	subi	r30, 0x5D	; 93
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	10 82       	st	Z, r1
						check[i]=key;
						LCD_intgerToString(check[i]);
						_delay_ms(500);
						}
				bool ch = TRUE;
				for(int i=0;i<5; i++)
    30c2:	de 01       	movw	r26, r28
    30c4:	a3 56       	subi	r26, 0x63	; 99
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e3 56       	subi	r30, 0x63	; 99
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	01 96       	adiw	r24, 0x01	; 1
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	9c 93       	st	X, r25
    30d8:	8e 93       	st	-X, r24
    30da:	fe 01       	movw	r30, r28
    30dc:	e3 56       	subi	r30, 0x63	; 99
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	85 30       	cpi	r24, 0x05	; 5
    30e6:	91 05       	cpc	r25, r1
    30e8:	74 f2       	brlt	.-100    	; 0x3086 <main+0xf78>
						ch = FALSE;


					}
				}
				if (ch)
    30ea:	fe 01       	movw	r30, r28
    30ec:	ed 55       	subi	r30, 0x5D	; 93
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 81       	ld	r24, Z
    30f2:	88 23       	and	r24, r24
    30f4:	09 f4       	brne	.+2      	; 0x30f8 <main+0xfea>
    30f6:	ab c0       	rjmp	.+342    	; 0x324e <main+0x1140>
				{
					LCD_displayStringRowColumn(0,0,"great");
    30f8:	2c e0       	ldi	r18, 0x0C	; 12
    30fa:	31 e0       	ldi	r19, 0x01	; 1
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	a9 01       	movw	r20, r18
    3102:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
					for(int j=0;j<5;j++){
    3106:	fe 01       	movw	r30, r28
    3108:	e5 56       	subi	r30, 0x65	; 101
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	11 82       	std	Z+1, r1	; 0x01
    310e:	10 82       	st	Z, r1
    3110:	93 c0       	rjmp	.+294    	; 0x3238 <main+0x112a>
									UART_sendByte(M1_READY);
    3112:	80 e2       	ldi	r24, 0x20	; 32
    3114:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
									while(UART_recieveByte() != M2_READY){} // wait until MC2 is ready
    3118:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    311c:	80 31       	cpi	r24, 0x10	; 16
    311e:	e1 f7       	brne	.-8      	; 0x3118 <main+0x100a>
													//UART_sendString(check);
													UART_sendByte(s[j]);
    3120:	fe 01       	movw	r30, r28
    3122:	e5 56       	subi	r30, 0x65	; 101
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	20 81       	ld	r18, Z
    3128:	31 81       	ldd	r19, Z+1	; 0x01
    312a:	ce 01       	movw	r24, r28
    312c:	82 55       	subi	r24, 0x52	; 82
    312e:	9f 4f       	sbci	r25, 0xFF	; 255
    3130:	fc 01       	movw	r30, r24
    3132:	e2 0f       	add	r30, r18
    3134:	f3 1f       	adc	r31, r19
    3136:	80 81       	ld	r24, Z
    3138:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	aa ef       	ldi	r26, 0xFA	; 250
    3142:	b3 e4       	ldi	r27, 0x43	; 67
    3144:	8b 87       	std	Y+11, r24	; 0x0b
    3146:	9c 87       	std	Y+12, r25	; 0x0c
    3148:	ad 87       	std	Y+13, r26	; 0x0d
    314a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314c:	6b 85       	ldd	r22, Y+11	; 0x0b
    314e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3150:	8d 85       	ldd	r24, Y+13	; 0x0d
    3152:	9e 85       	ldd	r25, Y+14	; 0x0e
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a e7       	ldi	r20, 0x7A	; 122
    315a:	53 e4       	ldi	r21, 0x43	; 67
    315c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	8f 83       	std	Y+7, r24	; 0x07
    3166:	98 87       	std	Y+8, r25	; 0x08
    3168:	a9 87       	std	Y+9, r26	; 0x09
    316a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    316c:	6f 81       	ldd	r22, Y+7	; 0x07
    316e:	78 85       	ldd	r23, Y+8	; 0x08
    3170:	89 85       	ldd	r24, Y+9	; 0x09
    3172:	9a 85       	ldd	r25, Y+10	; 0x0a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e8       	ldi	r20, 0x80	; 128
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3180:	88 23       	and	r24, r24
    3182:	2c f4       	brge	.+10     	; 0x318e <main+0x1080>
		__ticks = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	9e 83       	std	Y+6, r25	; 0x06
    318a:	8d 83       	std	Y+5, r24	; 0x05
    318c:	3f c0       	rjmp	.+126    	; 0x320c <main+0x10fe>
	else if (__tmp > 65535)
    318e:	6f 81       	ldd	r22, Y+7	; 0x07
    3190:	78 85       	ldd	r23, Y+8	; 0x08
    3192:	89 85       	ldd	r24, Y+9	; 0x09
    3194:	9a 85       	ldd	r25, Y+10	; 0x0a
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	4c f5       	brge	.+82     	; 0x31f8 <main+0x10ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e2       	ldi	r20, 0x20	; 32
    31b4:	51 e4       	ldi	r21, 0x41	; 65
    31b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9e 83       	std	Y+6, r25	; 0x06
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	0f c0       	rjmp	.+30     	; 0x31ee <main+0x10e0>
    31d0:	89 e1       	ldi	r24, 0x19	; 25
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <main+0x10ce>
    31e0:	9c 83       	std	Y+4, r25	; 0x04
    31e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	9e 83       	std	Y+6, r25	; 0x06
    31ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	8d 81       	ldd	r24, Y+5	; 0x05
    31f0:	9e 81       	ldd	r25, Y+6	; 0x06
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	69 f7       	brne	.-38     	; 0x31d0 <main+0x10c2>
    31f6:	14 c0       	rjmp	.+40     	; 0x3220 <main+0x1112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
    320c:	8d 81       	ldd	r24, Y+5	; 0x05
    320e:	9e 81       	ldd	r25, Y+6	; 0x06
    3210:	9a 83       	std	Y+2, r25	; 0x02
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	9a 81       	ldd	r25, Y+2	; 0x02
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <main+0x110a>
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
					}
				}
				if (ch)
				{
					LCD_displayStringRowColumn(0,0,"great");
					for(int j=0;j<5;j++){
    3220:	de 01       	movw	r26, r28
    3222:	a5 56       	subi	r26, 0x65	; 101
    3224:	bf 4f       	sbci	r27, 0xFF	; 255
    3226:	fe 01       	movw	r30, r28
    3228:	e5 56       	subi	r30, 0x65	; 101
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	01 96       	adiw	r24, 0x01	; 1
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	9c 93       	st	X, r25
    3236:	8e 93       	st	-X, r24
    3238:	fe 01       	movw	r30, r28
    323a:	e5 56       	subi	r30, 0x65	; 101
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	85 30       	cpi	r24, 0x05	; 5
    3244:	91 05       	cpc	r25, r1
    3246:	0c f4       	brge	.+2      	; 0x324a <main+0x113c>
    3248:	64 cf       	rjmp	.-312    	; 0x3112 <main+0x1004>
    324a:	0c 94 98 10 	jmp	0x2130	; 0x2130 <main+0x22>
													_delay_ms(500);}
						}
					else
					{

						LCD_displayStringRowColumn(0,0,"nope");
    324e:	22 e1       	ldi	r18, 0x12	; 18
    3250:	31 e0       	ldi	r19, 0x01	; 1
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	a9 01       	movw	r20, r18
    3258:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_displayStringRowColumn>
    325c:	0c 94 98 10 	jmp	0x2130	; 0x2130 <main+0x22>

00003260 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3268:	eb e2       	ldi	r30, 0x2B	; 43
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	82 e0       	ldi	r24, 0x02	; 2
    326e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3270:	ea e2       	ldi	r30, 0x2A	; 42
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	88 e1       	ldi	r24, 0x18	; 24
    3276:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3278:	e0 e4       	ldi	r30, 0x40	; 64
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	86 e8       	ldi	r24, 0x86	; 134
    327e:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3280:	e0 e4       	ldi	r30, 0x40	; 64
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3286:	e9 e2       	ldi	r30, 0x29	; 41
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	8c e0       	ldi	r24, 0x0C	; 12
    328c:	80 83       	st	Z, r24
}
    328e:	cf 91       	pop	r28
    3290:	df 91       	pop	r29
    3292:	08 95       	ret

00003294 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	0f 92       	push	r0
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    32a0:	eb e2       	ldi	r30, 0x2B	; 43
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	88 2f       	mov	r24, r24
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	80 72       	andi	r24, 0x20	; 32
    32ac:	90 70       	andi	r25, 0x00	; 0
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	b9 f3       	breq	.-18     	; 0x32a0 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    32b2:	ec e2       	ldi	r30, 0x2C	; 44
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32ca:	eb e2       	ldi	r30, 0x2B	; 43
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	88 23       	and	r24, r24
    32d2:	dc f7       	brge	.-10     	; 0x32ca <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;
    32d4:	ec e2       	ldi	r30, 0x2C	; 44
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <UART_sendString+0x6>
    32e6:	0f 92       	push	r0
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	9b 83       	std	Y+3, r25	; 0x03
    32ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32f0:	19 82       	std	Y+1, r1	; 0x01
    32f2:	0e c0       	rjmp	.+28     	; 0x3310 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	9b 81       	ldd	r25, Y+3	; 0x03
    32fe:	fc 01       	movw	r30, r24
    3300:	e2 0f       	add	r30, r18
    3302:	f3 1f       	adc	r31, r19
    3304:	80 81       	ld	r24, Z
    3306:	0e 94 4a 19 	call	0x3294	; 0x3294 <UART_sendByte>
		i++;
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	8f 5f       	subi	r24, 0xFF	; 255
    330e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	fc 01       	movw	r30, r24
    331c:	e2 0f       	add	r30, r18
    331e:	f3 1f       	adc	r31, r19
    3320:	80 81       	ld	r24, Z
    3322:	88 23       	and	r24, r24
    3324:	39 f7       	brne	.-50     	; 0x32f4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	00 d0       	rcall	.+0      	; 0x333c <UART_receiveString+0xa>
    333c:	0f 92       	push	r0
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
    3342:	9b 83       	std	Y+3, r25	; 0x03
    3344:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3346:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3348:	89 81       	ldd	r24, Y+1	; 0x01
    334a:	28 2f       	mov	r18, r24
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	9b 81       	ldd	r25, Y+3	; 0x03
    3352:	8c 01       	movw	r16, r24
    3354:	02 0f       	add	r16, r18
    3356:	13 1f       	adc	r17, r19
    3358:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    335c:	f8 01       	movw	r30, r16
    335e:	80 83       	st	Z, r24
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	8f 5f       	subi	r24, 0xFF	; 255
    3366:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	28 2f       	mov	r18, r24
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	9b 81       	ldd	r25, Y+3	; 0x03
    3372:	8c 01       	movw	r16, r24
    3374:	02 0f       	add	r16, r18
    3376:	13 1f       	adc	r17, r19
    3378:	0e 94 61 19 	call	0x32c2	; 0x32c2 <UART_recieveByte>
    337c:	f8 01       	movw	r30, r16
    337e:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	28 2f       	mov	r18, r24
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	9b 81       	ldd	r25, Y+3	; 0x03
    338a:	fc 01       	movw	r30, r24
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	80 81       	ld	r24, Z
    3392:	83 32       	cpi	r24, 0x23	; 35
    3394:	31 f7       	brne	.-52     	; 0x3362 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	9b 81       	ldd	r25, Y+3	; 0x03
    33a0:	fc 01       	movw	r30, r24
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	10 82       	st	Z, r1
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	08 95       	ret

000033b8 <__prologue_saves__>:
    33b8:	2f 92       	push	r2
    33ba:	3f 92       	push	r3
    33bc:	4f 92       	push	r4
    33be:	5f 92       	push	r5
    33c0:	6f 92       	push	r6
    33c2:	7f 92       	push	r7
    33c4:	8f 92       	push	r8
    33c6:	9f 92       	push	r9
    33c8:	af 92       	push	r10
    33ca:	bf 92       	push	r11
    33cc:	cf 92       	push	r12
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
    33d8:	cf 93       	push	r28
    33da:	df 93       	push	r29
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	ca 1b       	sub	r28, r26
    33e2:	db 0b       	sbc	r29, r27
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	09 94       	ijmp

000033f0 <__epilogue_restores__>:
    33f0:	2a 88       	ldd	r2, Y+18	; 0x12
    33f2:	39 88       	ldd	r3, Y+17	; 0x11
    33f4:	48 88       	ldd	r4, Y+16	; 0x10
    33f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    33f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    33fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    33fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    33fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3400:	aa 84       	ldd	r10, Y+10	; 0x0a
    3402:	b9 84       	ldd	r11, Y+9	; 0x09
    3404:	c8 84       	ldd	r12, Y+8	; 0x08
    3406:	df 80       	ldd	r13, Y+7	; 0x07
    3408:	ee 80       	ldd	r14, Y+6	; 0x06
    340a:	fd 80       	ldd	r15, Y+5	; 0x05
    340c:	0c 81       	ldd	r16, Y+4	; 0x04
    340e:	1b 81       	ldd	r17, Y+3	; 0x03
    3410:	aa 81       	ldd	r26, Y+2	; 0x02
    3412:	b9 81       	ldd	r27, Y+1	; 0x01
    3414:	ce 0f       	add	r28, r30
    3416:	d1 1d       	adc	r29, r1
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	ed 01       	movw	r28, r26
    3424:	08 95       	ret

00003426 <itoa>:
    3426:	fb 01       	movw	r30, r22
    3428:	9f 01       	movw	r18, r30
    342a:	e8 94       	clt
    342c:	42 30       	cpi	r20, 0x02	; 2
    342e:	c4 f0       	brlt	.+48     	; 0x3460 <itoa+0x3a>
    3430:	45 32       	cpi	r20, 0x25	; 37
    3432:	b4 f4       	brge	.+44     	; 0x3460 <itoa+0x3a>
    3434:	4a 30       	cpi	r20, 0x0A	; 10
    3436:	29 f4       	brne	.+10     	; 0x3442 <itoa+0x1c>
    3438:	97 fb       	bst	r25, 7
    343a:	1e f4       	brtc	.+6      	; 0x3442 <itoa+0x1c>
    343c:	90 95       	com	r25
    343e:	81 95       	neg	r24
    3440:	9f 4f       	sbci	r25, 0xFF	; 255
    3442:	64 2f       	mov	r22, r20
    3444:	77 27       	eor	r23, r23
    3446:	0e 94 44 1a 	call	0x3488	; 0x3488 <__udivmodhi4>
    344a:	80 5d       	subi	r24, 0xD0	; 208
    344c:	8a 33       	cpi	r24, 0x3A	; 58
    344e:	0c f0       	brlt	.+2      	; 0x3452 <itoa+0x2c>
    3450:	89 5d       	subi	r24, 0xD9	; 217
    3452:	81 93       	st	Z+, r24
    3454:	cb 01       	movw	r24, r22
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	a1 f7       	brne	.-24     	; 0x3442 <itoa+0x1c>
    345a:	16 f4       	brtc	.+4      	; 0x3460 <itoa+0x3a>
    345c:	5d e2       	ldi	r21, 0x2D	; 45
    345e:	51 93       	st	Z+, r21
    3460:	10 82       	st	Z, r1
    3462:	c9 01       	movw	r24, r18
    3464:	0c 94 34 1a 	jmp	0x3468	; 0x3468 <strrev>

00003468 <strrev>:
    3468:	dc 01       	movw	r26, r24
    346a:	fc 01       	movw	r30, r24
    346c:	67 2f       	mov	r22, r23
    346e:	71 91       	ld	r23, Z+
    3470:	77 23       	and	r23, r23
    3472:	e1 f7       	brne	.-8      	; 0x346c <strrev+0x4>
    3474:	32 97       	sbiw	r30, 0x02	; 2
    3476:	04 c0       	rjmp	.+8      	; 0x3480 <strrev+0x18>
    3478:	7c 91       	ld	r23, X
    347a:	6d 93       	st	X+, r22
    347c:	70 83       	st	Z, r23
    347e:	62 91       	ld	r22, -Z
    3480:	ae 17       	cp	r26, r30
    3482:	bf 07       	cpc	r27, r31
    3484:	c8 f3       	brcs	.-14     	; 0x3478 <strrev+0x10>
    3486:	08 95       	ret

00003488 <__udivmodhi4>:
    3488:	aa 1b       	sub	r26, r26
    348a:	bb 1b       	sub	r27, r27
    348c:	51 e1       	ldi	r21, 0x11	; 17
    348e:	07 c0       	rjmp	.+14     	; 0x349e <__udivmodhi4_ep>

00003490 <__udivmodhi4_loop>:
    3490:	aa 1f       	adc	r26, r26
    3492:	bb 1f       	adc	r27, r27
    3494:	a6 17       	cp	r26, r22
    3496:	b7 07       	cpc	r27, r23
    3498:	10 f0       	brcs	.+4      	; 0x349e <__udivmodhi4_ep>
    349a:	a6 1b       	sub	r26, r22
    349c:	b7 0b       	sbc	r27, r23

0000349e <__udivmodhi4_ep>:
    349e:	88 1f       	adc	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	5a 95       	dec	r21
    34a4:	a9 f7       	brne	.-22     	; 0x3490 <__udivmodhi4_loop>
    34a6:	80 95       	com	r24
    34a8:	90 95       	com	r25
    34aa:	bc 01       	movw	r22, r24
    34ac:	cd 01       	movw	r24, r26
    34ae:	08 95       	ret

000034b0 <_exit>:
    34b0:	f8 94       	cli

000034b2 <__stop_program>:
    34b2:	ff cf       	rjmp	.-2      	; 0x34b2 <__stop_program>
